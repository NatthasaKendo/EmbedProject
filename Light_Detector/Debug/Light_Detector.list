
Light_Detector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004da4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004f44  08004f44  00014f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f9c  08004f9c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004f9c  08004f9c  00014f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fa4  08004fa4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fa4  08004fa4  00014fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fa8  08004fa8  00014fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004fac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000070  0800501c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  0800501c  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a642  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000182c  00000000  00000000  0002a6e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b38  00000000  00000000  0002bf10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a70  00000000  00000000  0002ca48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001577a  00000000  00000000  0002d4b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007c0c  00000000  00000000  00042c32  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a84b  00000000  00000000  0004a83e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d5089  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003330  00000000  00000000  000d5104  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004f2c 	.word	0x08004f2c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004f2c 	.word	0x08004f2c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b972 	b.w	8000d78 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9e08      	ldr	r6, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	4688      	mov	r8, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d14b      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000aba:	428a      	cmp	r2, r1
 8000abc:	4615      	mov	r5, r2
 8000abe:	d967      	bls.n	8000b90 <__udivmoddi4+0xe4>
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	b14a      	cbz	r2, 8000ada <__udivmoddi4+0x2e>
 8000ac6:	f1c2 0720 	rsb	r7, r2, #32
 8000aca:	fa01 f302 	lsl.w	r3, r1, r2
 8000ace:	fa20 f707 	lsr.w	r7, r0, r7
 8000ad2:	4095      	lsls	r5, r2
 8000ad4:	ea47 0803 	orr.w	r8, r7, r3
 8000ad8:	4094      	lsls	r4, r2
 8000ada:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ade:	0c23      	lsrs	r3, r4, #16
 8000ae0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ae4:	fa1f fc85 	uxth.w	ip, r5
 8000ae8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000aec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000af0:	fb07 f10c 	mul.w	r1, r7, ip
 8000af4:	4299      	cmp	r1, r3
 8000af6:	d909      	bls.n	8000b0c <__udivmoddi4+0x60>
 8000af8:	18eb      	adds	r3, r5, r3
 8000afa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000afe:	f080 811b 	bcs.w	8000d38 <__udivmoddi4+0x28c>
 8000b02:	4299      	cmp	r1, r3
 8000b04:	f240 8118 	bls.w	8000d38 <__udivmoddi4+0x28c>
 8000b08:	3f02      	subs	r7, #2
 8000b0a:	442b      	add	r3, r5
 8000b0c:	1a5b      	subs	r3, r3, r1
 8000b0e:	b2a4      	uxth	r4, r4
 8000b10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b1c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b20:	45a4      	cmp	ip, r4
 8000b22:	d909      	bls.n	8000b38 <__udivmoddi4+0x8c>
 8000b24:	192c      	adds	r4, r5, r4
 8000b26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b2a:	f080 8107 	bcs.w	8000d3c <__udivmoddi4+0x290>
 8000b2e:	45a4      	cmp	ip, r4
 8000b30:	f240 8104 	bls.w	8000d3c <__udivmoddi4+0x290>
 8000b34:	3802      	subs	r0, #2
 8000b36:	442c      	add	r4, r5
 8000b38:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b3c:	eba4 040c 	sub.w	r4, r4, ip
 8000b40:	2700      	movs	r7, #0
 8000b42:	b11e      	cbz	r6, 8000b4c <__udivmoddi4+0xa0>
 8000b44:	40d4      	lsrs	r4, r2
 8000b46:	2300      	movs	r3, #0
 8000b48:	e9c6 4300 	strd	r4, r3, [r6]
 8000b4c:	4639      	mov	r1, r7
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d909      	bls.n	8000b6a <__udivmoddi4+0xbe>
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	f000 80eb 	beq.w	8000d32 <__udivmoddi4+0x286>
 8000b5c:	2700      	movs	r7, #0
 8000b5e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b62:	4638      	mov	r0, r7
 8000b64:	4639      	mov	r1, r7
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	fab3 f783 	clz	r7, r3
 8000b6e:	2f00      	cmp	r7, #0
 8000b70:	d147      	bne.n	8000c02 <__udivmoddi4+0x156>
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d302      	bcc.n	8000b7c <__udivmoddi4+0xd0>
 8000b76:	4282      	cmp	r2, r0
 8000b78:	f200 80fa 	bhi.w	8000d70 <__udivmoddi4+0x2c4>
 8000b7c:	1a84      	subs	r4, r0, r2
 8000b7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b82:	2001      	movs	r0, #1
 8000b84:	4698      	mov	r8, r3
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	d0e0      	beq.n	8000b4c <__udivmoddi4+0xa0>
 8000b8a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b8e:	e7dd      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000b90:	b902      	cbnz	r2, 8000b94 <__udivmoddi4+0xe8>
 8000b92:	deff      	udf	#255	; 0xff
 8000b94:	fab2 f282 	clz	r2, r2
 8000b98:	2a00      	cmp	r2, #0
 8000b9a:	f040 808f 	bne.w	8000cbc <__udivmoddi4+0x210>
 8000b9e:	1b49      	subs	r1, r1, r5
 8000ba0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ba4:	fa1f f885 	uxth.w	r8, r5
 8000ba8:	2701      	movs	r7, #1
 8000baa:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bae:	0c23      	lsrs	r3, r4, #16
 8000bb0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bbc:	4299      	cmp	r1, r3
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0x124>
 8000bc0:	18eb      	adds	r3, r5, r3
 8000bc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x122>
 8000bc8:	4299      	cmp	r1, r3
 8000bca:	f200 80cd 	bhi.w	8000d68 <__udivmoddi4+0x2bc>
 8000bce:	4684      	mov	ip, r0
 8000bd0:	1a59      	subs	r1, r3, r1
 8000bd2:	b2a3      	uxth	r3, r4
 8000bd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bd8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bdc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000be0:	fb08 f800 	mul.w	r8, r8, r0
 8000be4:	45a0      	cmp	r8, r4
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x14c>
 8000be8:	192c      	adds	r4, r5, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x14a>
 8000bf0:	45a0      	cmp	r8, r4
 8000bf2:	f200 80b6 	bhi.w	8000d62 <__udivmoddi4+0x2b6>
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	eba4 0408 	sub.w	r4, r4, r8
 8000bfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c00:	e79f      	b.n	8000b42 <__udivmoddi4+0x96>
 8000c02:	f1c7 0c20 	rsb	ip, r7, #32
 8000c06:	40bb      	lsls	r3, r7
 8000c08:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c0c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c10:	fa01 f407 	lsl.w	r4, r1, r7
 8000c14:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c18:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c1c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c20:	4325      	orrs	r5, r4
 8000c22:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c26:	0c2c      	lsrs	r4, r5, #16
 8000c28:	fb08 3319 	mls	r3, r8, r9, r3
 8000c2c:	fa1f fa8e 	uxth.w	sl, lr
 8000c30:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c34:	fb09 f40a 	mul.w	r4, r9, sl
 8000c38:	429c      	cmp	r4, r3
 8000c3a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c3e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c42:	d90b      	bls.n	8000c5c <__udivmoddi4+0x1b0>
 8000c44:	eb1e 0303 	adds.w	r3, lr, r3
 8000c48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c4c:	f080 8087 	bcs.w	8000d5e <__udivmoddi4+0x2b2>
 8000c50:	429c      	cmp	r4, r3
 8000c52:	f240 8084 	bls.w	8000d5e <__udivmoddi4+0x2b2>
 8000c56:	f1a9 0902 	sub.w	r9, r9, #2
 8000c5a:	4473      	add	r3, lr
 8000c5c:	1b1b      	subs	r3, r3, r4
 8000c5e:	b2ad      	uxth	r5, r5
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c6c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c70:	45a2      	cmp	sl, r4
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x1da>
 8000c74:	eb1e 0404 	adds.w	r4, lr, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	d26b      	bcs.n	8000d56 <__udivmoddi4+0x2aa>
 8000c7e:	45a2      	cmp	sl, r4
 8000c80:	d969      	bls.n	8000d56 <__udivmoddi4+0x2aa>
 8000c82:	3802      	subs	r0, #2
 8000c84:	4474      	add	r4, lr
 8000c86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c8e:	eba4 040a 	sub.w	r4, r4, sl
 8000c92:	454c      	cmp	r4, r9
 8000c94:	46c2      	mov	sl, r8
 8000c96:	464b      	mov	r3, r9
 8000c98:	d354      	bcc.n	8000d44 <__udivmoddi4+0x298>
 8000c9a:	d051      	beq.n	8000d40 <__udivmoddi4+0x294>
 8000c9c:	2e00      	cmp	r6, #0
 8000c9e:	d069      	beq.n	8000d74 <__udivmoddi4+0x2c8>
 8000ca0:	ebb1 050a 	subs.w	r5, r1, sl
 8000ca4:	eb64 0403 	sbc.w	r4, r4, r3
 8000ca8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cac:	40fd      	lsrs	r5, r7
 8000cae:	40fc      	lsrs	r4, r7
 8000cb0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cb4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cb8:	2700      	movs	r7, #0
 8000cba:	e747      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000cbc:	f1c2 0320 	rsb	r3, r2, #32
 8000cc0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cc4:	4095      	lsls	r5, r2
 8000cc6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cca:	fa21 f303 	lsr.w	r3, r1, r3
 8000cce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd2:	4338      	orrs	r0, r7
 8000cd4:	0c01      	lsrs	r1, r0, #16
 8000cd6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cda:	fa1f f885 	uxth.w	r8, r5
 8000cde:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ce2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce6:	fb07 f308 	mul.w	r3, r7, r8
 8000cea:	428b      	cmp	r3, r1
 8000cec:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf0:	d907      	bls.n	8000d02 <__udivmoddi4+0x256>
 8000cf2:	1869      	adds	r1, r5, r1
 8000cf4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cf8:	d22f      	bcs.n	8000d5a <__udivmoddi4+0x2ae>
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d92d      	bls.n	8000d5a <__udivmoddi4+0x2ae>
 8000cfe:	3f02      	subs	r7, #2
 8000d00:	4429      	add	r1, r5
 8000d02:	1acb      	subs	r3, r1, r3
 8000d04:	b281      	uxth	r1, r0
 8000d06:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d0a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d12:	fb00 f308 	mul.w	r3, r0, r8
 8000d16:	428b      	cmp	r3, r1
 8000d18:	d907      	bls.n	8000d2a <__udivmoddi4+0x27e>
 8000d1a:	1869      	adds	r1, r5, r1
 8000d1c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d20:	d217      	bcs.n	8000d52 <__udivmoddi4+0x2a6>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d915      	bls.n	8000d52 <__udivmoddi4+0x2a6>
 8000d26:	3802      	subs	r0, #2
 8000d28:	4429      	add	r1, r5
 8000d2a:	1ac9      	subs	r1, r1, r3
 8000d2c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d30:	e73b      	b.n	8000baa <__udivmoddi4+0xfe>
 8000d32:	4637      	mov	r7, r6
 8000d34:	4630      	mov	r0, r6
 8000d36:	e709      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000d38:	4607      	mov	r7, r0
 8000d3a:	e6e7      	b.n	8000b0c <__udivmoddi4+0x60>
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	e6fb      	b.n	8000b38 <__udivmoddi4+0x8c>
 8000d40:	4541      	cmp	r1, r8
 8000d42:	d2ab      	bcs.n	8000c9c <__udivmoddi4+0x1f0>
 8000d44:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d48:	eb69 020e 	sbc.w	r2, r9, lr
 8000d4c:	3801      	subs	r0, #1
 8000d4e:	4613      	mov	r3, r2
 8000d50:	e7a4      	b.n	8000c9c <__udivmoddi4+0x1f0>
 8000d52:	4660      	mov	r0, ip
 8000d54:	e7e9      	b.n	8000d2a <__udivmoddi4+0x27e>
 8000d56:	4618      	mov	r0, r3
 8000d58:	e795      	b.n	8000c86 <__udivmoddi4+0x1da>
 8000d5a:	4667      	mov	r7, ip
 8000d5c:	e7d1      	b.n	8000d02 <__udivmoddi4+0x256>
 8000d5e:	4681      	mov	r9, r0
 8000d60:	e77c      	b.n	8000c5c <__udivmoddi4+0x1b0>
 8000d62:	3802      	subs	r0, #2
 8000d64:	442c      	add	r4, r5
 8000d66:	e747      	b.n	8000bf8 <__udivmoddi4+0x14c>
 8000d68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d6c:	442b      	add	r3, r5
 8000d6e:	e72f      	b.n	8000bd0 <__udivmoddi4+0x124>
 8000d70:	4638      	mov	r0, r7
 8000d72:	e708      	b.n	8000b86 <__udivmoddi4+0xda>
 8000d74:	4637      	mov	r7, r6
 8000d76:	e6e9      	b.n	8000b4c <__udivmoddi4+0xa0>

08000d78 <__aeabi_idiv0>:
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	0000      	movs	r0, r0
	...

08000d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d86:	f000 feb5 	bl	8001af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d8a:	f000 f96d 	bl	8001068 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d8e:	f000 fbb7 	bl	8001500 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d92:	f000 fa71 	bl	8001278 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000d96:	f000 f9cf 	bl	8001138 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000d9a:	f000 fb5d 	bl	8001458 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000d9e:	f000 fb85 	bl	80014ac <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000da2:	f000 fae9 	bl	8001378 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8000da6:	2108      	movs	r1, #8
 8000da8:	489f      	ldr	r0, [pc, #636]	; (8001028 <main+0x2a8>)
 8000daa:	f001 ff27 	bl	8002bfc <HAL_TIM_IC_Start_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	//Red
 8000dae:	2100      	movs	r1, #0
 8000db0:	489e      	ldr	r0, [pc, #632]	; (800102c <main+0x2ac>)
 8000db2:	f001 febb 	bl	8002b2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);	//Green
 8000db6:	2104      	movs	r1, #4
 8000db8:	489c      	ldr	r0, [pc, #624]	; (800102c <main+0x2ac>)
 8000dba:	f001 feb7 	bl	8002b2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);	//Blue
 8000dbe:	2108      	movs	r1, #8
 8000dc0:	489b      	ldr	r0, [pc, #620]	; (8001030 <main+0x2b0>)
 8000dc2:	f001 feb3 	bl	8002b2c <HAL_TIM_PWM_Start>

  //Set_Filter(Clear);
  //Set_Scaling(Scl100);

  colorRed = 0;
 8000dc6:	4b9b      	ldr	r3, [pc, #620]	; (8001034 <main+0x2b4>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
  colorGreen = 0;
 8000dcc:	4b9a      	ldr	r3, [pc, #616]	; (8001038 <main+0x2b8>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
  colorBlue = 0;
 8000dd2:	4b9a      	ldr	r3, [pc, #616]	; (800103c <main+0x2bc>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]

  IC_Val1 = 0;
 8000dd8:	4b99      	ldr	r3, [pc, #612]	; (8001040 <main+0x2c0>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
  IC_Val2 = 0;
 8000dde:	4b99      	ldr	r3, [pc, #612]	; (8001044 <main+0x2c4>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
  Freq = 0;
 8000de4:	4b98      	ldr	r3, [pc, #608]	; (8001048 <main+0x2c8>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
  Is_First_Capture = 0;
 8000dea:	4b98      	ldr	r3, [pc, #608]	; (800104c <main+0x2cc>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000df0:	2201      	movs	r2, #1
 8000df2:	2101      	movs	r1, #1
 8000df4:	4896      	ldr	r0, [pc, #600]	; (8001050 <main+0x2d0>)
 8000df6:	f001 f9bd 	bl	8002174 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	2102      	movs	r1, #2
 8000dfe:	4894      	ldr	r0, [pc, #592]	; (8001050 <main+0x2d0>)
 8000e00:	f001 f9b8 	bl	8002174 <HAL_GPIO_WritePin>

  TIM2->CCR1 = 242;
 8000e04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e08:	22f2      	movs	r2, #242	; 0xf2
 8000e0a:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR2 = 185;
 8000e0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e10:	22b9      	movs	r2, #185	; 0xb9
 8000e12:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 150;
 8000e14:	4b8f      	ldr	r3, [pc, #572]	; (8001054 <main+0x2d4>)
 8000e16:	2296      	movs	r2, #150	; 0x96
 8000e18:	63da      	str	r2, [r3, #60]	; 0x3c
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Reset color value
	  colorRed = 0;
 8000e1a:	4b86      	ldr	r3, [pc, #536]	; (8001034 <main+0x2b4>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
	  colorGreen = 0;
 8000e20:	4b85      	ldr	r3, [pc, #532]	; (8001038 <main+0x2b8>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
	  colorBlue = 0;
 8000e26:	4b85      	ldr	r3, [pc, #532]	; (800103c <main+0x2bc>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]

	  //Get Red value
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2104      	movs	r1, #4
 8000e30:	4887      	ldr	r0, [pc, #540]	; (8001050 <main+0x2d0>)
 8000e32:	f001 f99f 	bl	8002174 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2108      	movs	r1, #8
 8000e3a:	4885      	ldr	r0, [pc, #532]	; (8001050 <main+0x2d0>)
 8000e3c:	f001 f99a 	bl	8002174 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 8000e40:	200a      	movs	r0, #10
 8000e42:	f000 fec9 	bl	8001bd8 <HAL_Delay>
	  colorRed = (255.0/(MAX_RED-MIN_RED))*(Freq-MIN_RED);
 8000e46:	4b80      	ldr	r3, [pc, #512]	; (8001048 <main+0x2c8>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fb62 	bl	8000514 <__aeabi_ui2d>
 8000e50:	a369      	add	r3, pc, #420	; (adr r3, 8000ff8 <main+0x278>)
 8000e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e56:	f7ff fa1f 	bl	8000298 <__aeabi_dsub>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	460c      	mov	r4, r1
 8000e5e:	4618      	mov	r0, r3
 8000e60:	4621      	mov	r1, r4
 8000e62:	a367      	add	r3, pc, #412	; (adr r3, 8001000 <main+0x280>)
 8000e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e68:	f7ff fbce 	bl	8000608 <__aeabi_dmul>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	460c      	mov	r4, r1
 8000e70:	4618      	mov	r0, r3
 8000e72:	4621      	mov	r1, r4
 8000e74:	f7ff fdda 	bl	8000a2c <__aeabi_d2iz>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	4b6e      	ldr	r3, [pc, #440]	; (8001034 <main+0x2b4>)
 8000e7c:	601a      	str	r2, [r3, #0]

	  //Get Green Value
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	2104      	movs	r1, #4
 8000e82:	4873      	ldr	r0, [pc, #460]	; (8001050 <main+0x2d0>)
 8000e84:	f001 f976 	bl	8002174 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2108      	movs	r1, #8
 8000e8c:	4870      	ldr	r0, [pc, #448]	; (8001050 <main+0x2d0>)
 8000e8e:	f001 f971 	bl	8002174 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 8000e92:	200a      	movs	r0, #10
 8000e94:	f000 fea0 	bl	8001bd8 <HAL_Delay>
	  colorGreen = (255.0/(MAX_GREEN-MIN_GREEN))*(Freq-MIN_GREEN);
 8000e98:	4b6b      	ldr	r3, [pc, #428]	; (8001048 <main+0x2c8>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fb39 	bl	8000514 <__aeabi_ui2d>
 8000ea2:	a359      	add	r3, pc, #356	; (adr r3, 8001008 <main+0x288>)
 8000ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea8:	f7ff f9f6 	bl	8000298 <__aeabi_dsub>
 8000eac:	4603      	mov	r3, r0
 8000eae:	460c      	mov	r4, r1
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	4621      	mov	r1, r4
 8000eb4:	a356      	add	r3, pc, #344	; (adr r3, 8001010 <main+0x290>)
 8000eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eba:	f7ff fba5 	bl	8000608 <__aeabi_dmul>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	460c      	mov	r4, r1
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	4621      	mov	r1, r4
 8000ec6:	f7ff fdb1 	bl	8000a2c <__aeabi_d2iz>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	4b5a      	ldr	r3, [pc, #360]	; (8001038 <main+0x2b8>)
 8000ece:	601a      	str	r2, [r3, #0]

	  //Get Blue Value
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2104      	movs	r1, #4
 8000ed4:	485e      	ldr	r0, [pc, #376]	; (8001050 <main+0x2d0>)
 8000ed6:	f001 f94d 	bl	8002174 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000eda:	2201      	movs	r2, #1
 8000edc:	2108      	movs	r1, #8
 8000ede:	485c      	ldr	r0, [pc, #368]	; (8001050 <main+0x2d0>)
 8000ee0:	f001 f948 	bl	8002174 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 8000ee4:	200a      	movs	r0, #10
 8000ee6:	f000 fe77 	bl	8001bd8 <HAL_Delay>
	  colorBlue = (255.0/(MAX_BLUE-MIN_BLUE))*(Freq-MIN_BLUE);
 8000eea:	4b57      	ldr	r3, [pc, #348]	; (8001048 <main+0x2c8>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff fb10 	bl	8000514 <__aeabi_ui2d>
 8000ef4:	a348      	add	r3, pc, #288	; (adr r3, 8001018 <main+0x298>)
 8000ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efa:	f7ff f9cd 	bl	8000298 <__aeabi_dsub>
 8000efe:	4603      	mov	r3, r0
 8000f00:	460c      	mov	r4, r1
 8000f02:	4618      	mov	r0, r3
 8000f04:	4621      	mov	r1, r4
 8000f06:	a346      	add	r3, pc, #280	; (adr r3, 8001020 <main+0x2a0>)
 8000f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0c:	f7ff fb7c 	bl	8000608 <__aeabi_dmul>
 8000f10:	4603      	mov	r3, r0
 8000f12:	460c      	mov	r4, r1
 8000f14:	4618      	mov	r0, r3
 8000f16:	4621      	mov	r1, r4
 8000f18:	f7ff fd88 	bl	8000a2c <__aeabi_d2iz>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	4b47      	ldr	r3, [pc, #284]	; (800103c <main+0x2bc>)
 8000f20:	601a      	str	r2, [r3, #0]

	  //Value Correction
	  if(colorRed > 255)	colorRed = 255;
 8000f22:	4b44      	ldr	r3, [pc, #272]	; (8001034 <main+0x2b4>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2bff      	cmp	r3, #255	; 0xff
 8000f28:	dd02      	ble.n	8000f30 <main+0x1b0>
 8000f2a:	4b42      	ldr	r3, [pc, #264]	; (8001034 <main+0x2b4>)
 8000f2c:	22ff      	movs	r2, #255	; 0xff
 8000f2e:	601a      	str	r2, [r3, #0]
	  if(colorRed < 0)		colorRed = 0;
 8000f30:	4b40      	ldr	r3, [pc, #256]	; (8001034 <main+0x2b4>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	da02      	bge.n	8000f3e <main+0x1be>
 8000f38:	4b3e      	ldr	r3, [pc, #248]	; (8001034 <main+0x2b4>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
	  if(colorGreen > 255)	colorGreen = 255;
 8000f3e:	4b3e      	ldr	r3, [pc, #248]	; (8001038 <main+0x2b8>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2bff      	cmp	r3, #255	; 0xff
 8000f44:	dd02      	ble.n	8000f4c <main+0x1cc>
 8000f46:	4b3c      	ldr	r3, [pc, #240]	; (8001038 <main+0x2b8>)
 8000f48:	22ff      	movs	r2, #255	; 0xff
 8000f4a:	601a      	str	r2, [r3, #0]
	  if(colorGreen < 0)	colorGreen = 0;
 8000f4c:	4b3a      	ldr	r3, [pc, #232]	; (8001038 <main+0x2b8>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	da02      	bge.n	8000f5a <main+0x1da>
 8000f54:	4b38      	ldr	r3, [pc, #224]	; (8001038 <main+0x2b8>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
	  if(colorBlue > 255)	colorBlue = 255;
 8000f5a:	4b38      	ldr	r3, [pc, #224]	; (800103c <main+0x2bc>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2bff      	cmp	r3, #255	; 0xff
 8000f60:	dd02      	ble.n	8000f68 <main+0x1e8>
 8000f62:	4b36      	ldr	r3, [pc, #216]	; (800103c <main+0x2bc>)
 8000f64:	22ff      	movs	r2, #255	; 0xff
 8000f66:	601a      	str	r2, [r3, #0]
	  if(colorBlue < 0)		colorBlue = 0;
 8000f68:	4b34      	ldr	r3, [pc, #208]	; (800103c <main+0x2bc>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	da02      	bge.n	8000f76 <main+0x1f6>
 8000f70:	4b32      	ldr	r3, [pc, #200]	; (800103c <main+0x2bc>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]

	  TIM2->CCR1 = colorRed;
 8000f76:	4b2f      	ldr	r3, [pc, #188]	; (8001034 <main+0x2b4>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f7e:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM2->CCR2 = colorGreen;
 8000f80:	4b2d      	ldr	r3, [pc, #180]	; (8001038 <main+0x2b8>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f88:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM1->CCR3 = colorBlue;
 8000f8a:	4b2c      	ldr	r3, [pc, #176]	; (800103c <main+0x2bc>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	4b31      	ldr	r3, [pc, #196]	; (8001054 <main+0x2d4>)
 8000f90:	63da      	str	r2, [r3, #60]	; 0x3c

	  //sprintf(buffer, "%d,%d,%d", colorRed,colorGreen,colorBlue);
	  //HAL_UART_Transmit(&huart1, &buffer, strlen(buffer), 100);

	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET && ch == 0){
 8000f92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f96:	482e      	ldr	r0, [pc, #184]	; (8001050 <main+0x2d0>)
 8000f98:	f001 f8d4 	bl	8002144 <HAL_GPIO_ReadPin>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d11d      	bne.n	8000fde <main+0x25e>
 8000fa2:	4b2d      	ldr	r3, [pc, #180]	; (8001058 <main+0x2d8>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d119      	bne.n	8000fde <main+0x25e>
		  ch = 1;
 8000faa:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <main+0x2d8>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	601a      	str	r2, [r3, #0]

		  sprintf(buffer, "%d,%d,%d", colorRed,colorGreen,colorBlue);
 8000fb0:	4b20      	ldr	r3, [pc, #128]	; (8001034 <main+0x2b4>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4b20      	ldr	r3, [pc, #128]	; (8001038 <main+0x2b8>)
 8000fb6:	6819      	ldr	r1, [r3, #0]
 8000fb8:	4b20      	ldr	r3, [pc, #128]	; (800103c <main+0x2bc>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4926      	ldr	r1, [pc, #152]	; (800105c <main+0x2dc>)
 8000fc2:	4827      	ldr	r0, [pc, #156]	; (8001060 <main+0x2e0>)
 8000fc4:	f003 fbac 	bl	8004720 <siprintf>
		  HAL_UART_Transmit(&huart1, &buffer, strlen(buffer), 100);
 8000fc8:	4825      	ldr	r0, [pc, #148]	; (8001060 <main+0x2e0>)
 8000fca:	f7ff f909 	bl	80001e0 <strlen>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	2364      	movs	r3, #100	; 0x64
 8000fd4:	4922      	ldr	r1, [pc, #136]	; (8001060 <main+0x2e0>)
 8000fd6:	4823      	ldr	r0, [pc, #140]	; (8001064 <main+0x2e4>)
 8000fd8:	f002 ff11 	bl	8003dfe <HAL_UART_Transmit>
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET && ch == 0){
 8000fdc:	e00b      	b.n	8000ff6 <main+0x276>
			*/
		  //char c = '0';
		  //HAL_UART_Transmit(&huart1, &c, strlen(c), 100);


	  } else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) ==  GPIO_PIN_SET){
 8000fde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe2:	481b      	ldr	r0, [pc, #108]	; (8001050 <main+0x2d0>)
 8000fe4:	f001 f8ae 	bl	8002144 <HAL_GPIO_ReadPin>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	f47f af15 	bne.w	8000e1a <main+0x9a>
		  ch = 0;
 8000ff0:	4b19      	ldr	r3, [pc, #100]	; (8001058 <main+0x2d8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
	  colorRed = 0;
 8000ff6:	e710      	b.n	8000e1a <main+0x9a>
 8000ff8:	00000000 	.word	0x00000000
 8000ffc:	40cbc500 	.word	0x40cbc500
 8001000:	321f3759 	.word	0x321f3759
 8001004:	3f64e028 	.word	0x3f64e028
 8001008:	00000000 	.word	0x00000000
 800100c:	40c56b80 	.word	0x40c56b80
 8001010:	b7cdcd25 	.word	0xb7cdcd25
 8001014:	3f6577f6 	.word	0x3f6577f6
 8001018:	00000000 	.word	0x00000000
 800101c:	40c96300 	.word	0x40c96300
 8001020:	c09d8d26 	.word	0xc09d8d26
 8001024:	3f611c4d 	.word	0x3f611c4d
 8001028:	200000a0 	.word	0x200000a0
 800102c:	200001d8 	.word	0x200001d8
 8001030:	20000198 	.word	0x20000198
 8001034:	20000190 	.word	0x20000190
 8001038:	200000e4 	.word	0x200000e4
 800103c:	20000258 	.word	0x20000258
 8001040:	2000009c 	.word	0x2000009c
 8001044:	20000194 	.word	0x20000194
 8001048:	200000e8 	.word	0x200000e8
 800104c:	200000e0 	.word	0x200000e0
 8001050:	40020800 	.word	0x40020800
 8001054:	40010000 	.word	0x40010000
 8001058:	2000008c 	.word	0x2000008c
 800105c:	08004f44 	.word	0x08004f44
 8001060:	2000012c 	.word	0x2000012c
 8001064:	200000ec 	.word	0x200000ec

08001068 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b094      	sub	sp, #80	; 0x50
 800106c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106e:	f107 0320 	add.w	r3, r7, #32
 8001072:	2230      	movs	r2, #48	; 0x30
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f003 fb4a 	bl	8004710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800108c:	2300      	movs	r3, #0
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	4b27      	ldr	r3, [pc, #156]	; (8001130 <SystemClock_Config+0xc8>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	4a26      	ldr	r2, [pc, #152]	; (8001130 <SystemClock_Config+0xc8>)
 8001096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109a:	6413      	str	r3, [r2, #64]	; 0x40
 800109c:	4b24      	ldr	r3, [pc, #144]	; (8001130 <SystemClock_Config+0xc8>)
 800109e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a8:	2300      	movs	r3, #0
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	4b21      	ldr	r3, [pc, #132]	; (8001134 <SystemClock_Config+0xcc>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a20      	ldr	r2, [pc, #128]	; (8001134 <SystemClock_Config+0xcc>)
 80010b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <SystemClock_Config+0xcc>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010c4:	2302      	movs	r3, #2
 80010c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c8:	2301      	movs	r3, #1
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010cc:	2310      	movs	r3, #16
 80010ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d0:	2302      	movs	r3, #2
 80010d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010d4:	2300      	movs	r3, #0
 80010d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010d8:	2308      	movs	r3, #8
 80010da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80010dc:	2348      	movs	r3, #72	; 0x48
 80010de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e0:	2302      	movs	r3, #2
 80010e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010e4:	2304      	movs	r3, #4
 80010e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e8:	f107 0320 	add.w	r3, r7, #32
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 f85b 	bl	80021a8 <HAL_RCC_OscConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010f8:	f000 fad0 	bl	800169c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fc:	230f      	movs	r3, #15
 80010fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001100:	2302      	movs	r3, #2
 8001102:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001112:	f107 030c 	add.w	r3, r7, #12
 8001116:	2102      	movs	r1, #2
 8001118:	4618      	mov	r0, r3
 800111a:	f001 fab5 	bl	8002688 <HAL_RCC_ClockConfig>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001124:	f000 faba 	bl	800169c <Error_Handler>
  }
}
 8001128:	bf00      	nop
 800112a:	3750      	adds	r7, #80	; 0x50
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40023800 	.word	0x40023800
 8001134:	40007000 	.word	0x40007000

08001138 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b096      	sub	sp, #88	; 0x58
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800113e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800114c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	611a      	str	r2, [r3, #16]
 8001166:	615a      	str	r2, [r3, #20]
 8001168:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	2220      	movs	r2, #32
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f003 facd 	bl	8004710 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001176:	4b3e      	ldr	r3, [pc, #248]	; (8001270 <MX_TIM1_Init+0x138>)
 8001178:	4a3e      	ldr	r2, [pc, #248]	; (8001274 <MX_TIM1_Init+0x13c>)
 800117a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800117c:	4b3c      	ldr	r3, [pc, #240]	; (8001270 <MX_TIM1_Init+0x138>)
 800117e:	2200      	movs	r2, #0
 8001180:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001182:	4b3b      	ldr	r3, [pc, #236]	; (8001270 <MX_TIM1_Init+0x138>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8001188:	4b39      	ldr	r3, [pc, #228]	; (8001270 <MX_TIM1_Init+0x138>)
 800118a:	22ff      	movs	r2, #255	; 0xff
 800118c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118e:	4b38      	ldr	r3, [pc, #224]	; (8001270 <MX_TIM1_Init+0x138>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001194:	4b36      	ldr	r3, [pc, #216]	; (8001270 <MX_TIM1_Init+0x138>)
 8001196:	2200      	movs	r2, #0
 8001198:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119a:	4b35      	ldr	r3, [pc, #212]	; (8001270 <MX_TIM1_Init+0x138>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011a0:	4833      	ldr	r0, [pc, #204]	; (8001270 <MX_TIM1_Init+0x138>)
 80011a2:	f001 fc63 	bl	8002a6c <HAL_TIM_Base_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80011ac:	f000 fa76 	bl	800169c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011ba:	4619      	mov	r1, r3
 80011bc:	482c      	ldr	r0, [pc, #176]	; (8001270 <MX_TIM1_Init+0x138>)
 80011be:	f001 ffef 	bl	80031a0 <HAL_TIM_ConfigClockSource>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80011c8:	f000 fa68 	bl	800169c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011cc:	4828      	ldr	r0, [pc, #160]	; (8001270 <MX_TIM1_Init+0x138>)
 80011ce:	f001 fc78 	bl	8002ac2 <HAL_TIM_PWM_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80011d8:	f000 fa60 	bl	800169c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011dc:	2300      	movs	r3, #0
 80011de:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011e8:	4619      	mov	r1, r3
 80011ea:	4821      	ldr	r0, [pc, #132]	; (8001270 <MX_TIM1_Init+0x138>)
 80011ec:	f002 fce6 	bl	8003bbc <HAL_TIMEx_MasterConfigSynchronization>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80011f6:	f000 fa51 	bl	800169c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011fa:	2360      	movs	r3, #96	; 0x60
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001202:	2300      	movs	r3, #0
 8001204:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001206:	2300      	movs	r3, #0
 8001208:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800120e:	2300      	movs	r3, #0
 8001210:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001212:	2300      	movs	r3, #0
 8001214:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121a:	2208      	movs	r2, #8
 800121c:	4619      	mov	r1, r3
 800121e:	4814      	ldr	r0, [pc, #80]	; (8001270 <MX_TIM1_Init+0x138>)
 8001220:	f001 fef8 	bl	8003014 <HAL_TIM_PWM_ConfigChannel>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800122a:	f000 fa37 	bl	800169c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001242:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001246:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001248:	2300      	movs	r3, #0
 800124a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	4619      	mov	r1, r3
 8001250:	4807      	ldr	r0, [pc, #28]	; (8001270 <MX_TIM1_Init+0x138>)
 8001252:	f002 fd21 	bl	8003c98 <HAL_TIMEx_ConfigBreakDeadTime>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800125c:	f000 fa1e 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001260:	4803      	ldr	r0, [pc, #12]	; (8001270 <MX_TIM1_Init+0x138>)
 8001262:	f000 fac1 	bl	80017e8 <HAL_TIM_MspPostInit>

}
 8001266:	bf00      	nop
 8001268:	3758      	adds	r7, #88	; 0x58
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000198 	.word	0x20000198
 8001274:	40010000 	.word	0x40010000

08001278 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08e      	sub	sp, #56	; 0x38
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128c:	f107 0320 	add.w	r3, r7, #32
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
 80012a4:	615a      	str	r2, [r3, #20]
 80012a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012a8:	4b32      	ldr	r3, [pc, #200]	; (8001374 <MX_TIM2_Init+0xfc>)
 80012aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012b0:	4b30      	ldr	r3, [pc, #192]	; (8001374 <MX_TIM2_Init+0xfc>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b6:	4b2f      	ldr	r3, [pc, #188]	; (8001374 <MX_TIM2_Init+0xfc>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80012bc:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <MX_TIM2_Init+0xfc>)
 80012be:	22ff      	movs	r2, #255	; 0xff
 80012c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c2:	4b2c      	ldr	r3, [pc, #176]	; (8001374 <MX_TIM2_Init+0xfc>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c8:	4b2a      	ldr	r3, [pc, #168]	; (8001374 <MX_TIM2_Init+0xfc>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012ce:	4829      	ldr	r0, [pc, #164]	; (8001374 <MX_TIM2_Init+0xfc>)
 80012d0:	f001 fbcc 	bl	8002a6c <HAL_TIM_Base_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80012da:	f000 f9df 	bl	800169c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012e8:	4619      	mov	r1, r3
 80012ea:	4822      	ldr	r0, [pc, #136]	; (8001374 <MX_TIM2_Init+0xfc>)
 80012ec:	f001 ff58 	bl	80031a0 <HAL_TIM_ConfigClockSource>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80012f6:	f000 f9d1 	bl	800169c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012fa:	481e      	ldr	r0, [pc, #120]	; (8001374 <MX_TIM2_Init+0xfc>)
 80012fc:	f001 fbe1 	bl	8002ac2 <HAL_TIM_PWM_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001306:	f000 f9c9 	bl	800169c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001312:	f107 0320 	add.w	r3, r7, #32
 8001316:	4619      	mov	r1, r3
 8001318:	4816      	ldr	r0, [pc, #88]	; (8001374 <MX_TIM2_Init+0xfc>)
 800131a:	f002 fc4f 	bl	8003bbc <HAL_TIMEx_MasterConfigSynchronization>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001324:	f000 f9ba 	bl	800169c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001328:	2360      	movs	r3, #96	; 0x60
 800132a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	2200      	movs	r2, #0
 800133c:	4619      	mov	r1, r3
 800133e:	480d      	ldr	r0, [pc, #52]	; (8001374 <MX_TIM2_Init+0xfc>)
 8001340:	f001 fe68 	bl	8003014 <HAL_TIM_PWM_ConfigChannel>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800134a:	f000 f9a7 	bl	800169c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	2204      	movs	r2, #4
 8001352:	4619      	mov	r1, r3
 8001354:	4807      	ldr	r0, [pc, #28]	; (8001374 <MX_TIM2_Init+0xfc>)
 8001356:	f001 fe5d 	bl	8003014 <HAL_TIM_PWM_ConfigChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8001360:	f000 f99c 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001364:	4803      	ldr	r0, [pc, #12]	; (8001374 <MX_TIM2_Init+0xfc>)
 8001366:	f000 fa3f 	bl	80017e8 <HAL_TIM_MspPostInit>

}
 800136a:	bf00      	nop
 800136c:	3738      	adds	r7, #56	; 0x38
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	200001d8 	.word	0x200001d8

08001378 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800137e:	f107 0318 	add.w	r3, r7, #24
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001396:	463b      	mov	r3, r7
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013a2:	4b2b      	ldr	r3, [pc, #172]	; (8001450 <MX_TIM3_Init+0xd8>)
 80013a4:	4a2b      	ldr	r2, [pc, #172]	; (8001454 <MX_TIM3_Init+0xdc>)
 80013a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013a8:	4b29      	ldr	r3, [pc, #164]	; (8001450 <MX_TIM3_Init+0xd8>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ae:	4b28      	ldr	r3, [pc, #160]	; (8001450 <MX_TIM3_Init+0xd8>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013b4:	4b26      	ldr	r3, [pc, #152]	; (8001450 <MX_TIM3_Init+0xd8>)
 80013b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013bc:	4b24      	ldr	r3, [pc, #144]	; (8001450 <MX_TIM3_Init+0xd8>)
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013c2:	4b23      	ldr	r3, [pc, #140]	; (8001450 <MX_TIM3_Init+0xd8>)
 80013c4:	2280      	movs	r2, #128	; 0x80
 80013c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013c8:	4821      	ldr	r0, [pc, #132]	; (8001450 <MX_TIM3_Init+0xd8>)
 80013ca:	f001 fb4f 	bl	8002a6c <HAL_TIM_Base_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80013d4:	f000 f962 	bl	800169c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013dc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013de:	f107 0318 	add.w	r3, r7, #24
 80013e2:	4619      	mov	r1, r3
 80013e4:	481a      	ldr	r0, [pc, #104]	; (8001450 <MX_TIM3_Init+0xd8>)
 80013e6:	f001 fedb 	bl	80031a0 <HAL_TIM_ConfigClockSource>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80013f0:	f000 f954 	bl	800169c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80013f4:	4816      	ldr	r0, [pc, #88]	; (8001450 <MX_TIM3_Init+0xd8>)
 80013f6:	f001 fbcb 	bl	8002b90 <HAL_TIM_IC_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001400:	f000 f94c 	bl	800169c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001404:	2300      	movs	r3, #0
 8001406:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800140c:	f107 0310 	add.w	r3, r7, #16
 8001410:	4619      	mov	r1, r3
 8001412:	480f      	ldr	r0, [pc, #60]	; (8001450 <MX_TIM3_Init+0xd8>)
 8001414:	f002 fbd2 	bl	8003bbc <HAL_TIMEx_MasterConfigSynchronization>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800141e:	f000 f93d 	bl	800169c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001422:	2300      	movs	r3, #0
 8001424:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001426:	2301      	movs	r3, #1
 8001428:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001432:	463b      	mov	r3, r7
 8001434:	2208      	movs	r2, #8
 8001436:	4619      	mov	r1, r3
 8001438:	4805      	ldr	r0, [pc, #20]	; (8001450 <MX_TIM3_Init+0xd8>)
 800143a:	f001 fd4f 	bl	8002edc <HAL_TIM_IC_ConfigChannel>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001444:	f000 f92a 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001448:	bf00      	nop
 800144a:	3728      	adds	r7, #40	; 0x28
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	200000a0 	.word	0x200000a0
 8001454:	40000400 	.word	0x40000400

08001458 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <MX_USART1_UART_Init+0x4c>)
 800145e:	4a12      	ldr	r2, [pc, #72]	; (80014a8 <MX_USART1_UART_Init+0x50>)
 8001460:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <MX_USART1_UART_Init+0x4c>)
 8001464:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001468:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <MX_USART1_UART_Init+0x4c>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <MX_USART1_UART_Init+0x4c>)
 8001472:	2200      	movs	r2, #0
 8001474:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <MX_USART1_UART_Init+0x4c>)
 8001478:	2200      	movs	r2, #0
 800147a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <MX_USART1_UART_Init+0x4c>)
 800147e:	220c      	movs	r2, #12
 8001480:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <MX_USART1_UART_Init+0x4c>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <MX_USART1_UART_Init+0x4c>)
 800148a:	2200      	movs	r2, #0
 800148c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800148e:	4805      	ldr	r0, [pc, #20]	; (80014a4 <MX_USART1_UART_Init+0x4c>)
 8001490:	f002 fc68 	bl	8003d64 <HAL_UART_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800149a:	f000 f8ff 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	200000ec 	.word	0x200000ec
 80014a8:	40011000 	.word	0x40011000

080014ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014b2:	4a12      	ldr	r2, [pc, #72]	; (80014fc <MX_USART2_UART_Init+0x50>)
 80014b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014be:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014ca:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014d0:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014d2:	220c      	movs	r2, #12
 80014d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014e2:	4805      	ldr	r0, [pc, #20]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014e4:	f002 fc3e 	bl	8003d64 <HAL_UART_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014ee:	f000 f8d5 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000218 	.word	0x20000218
 80014fc:	40004400 	.word	0x40004400

08001500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001506:	f107 030c 	add.w	r3, r7, #12
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	4b38      	ldr	r3, [pc, #224]	; (80015fc <MX_GPIO_Init+0xfc>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a37      	ldr	r2, [pc, #220]	; (80015fc <MX_GPIO_Init+0xfc>)
 8001520:	f043 0304 	orr.w	r3, r3, #4
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b35      	ldr	r3, [pc, #212]	; (80015fc <MX_GPIO_Init+0xfc>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0304 	and.w	r3, r3, #4
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	4b31      	ldr	r3, [pc, #196]	; (80015fc <MX_GPIO_Init+0xfc>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a30      	ldr	r2, [pc, #192]	; (80015fc <MX_GPIO_Init+0xfc>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b2e      	ldr	r3, [pc, #184]	; (80015fc <MX_GPIO_Init+0xfc>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	603b      	str	r3, [r7, #0]
 8001552:	4b2a      	ldr	r3, [pc, #168]	; (80015fc <MX_GPIO_Init+0xfc>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a29      	ldr	r2, [pc, #164]	; (80015fc <MX_GPIO_Init+0xfc>)
 8001558:	f043 0302 	orr.w	r3, r3, #2
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b27      	ldr	r3, [pc, #156]	; (80015fc <MX_GPIO_Init+0xfc>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	210f      	movs	r1, #15
 800156e:	4824      	ldr	r0, [pc, #144]	; (8001600 <MX_GPIO_Init+0x100>)
 8001570:	f000 fe00 	bl	8002174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001574:	2200      	movs	r2, #0
 8001576:	2120      	movs	r1, #32
 8001578:	4822      	ldr	r0, [pc, #136]	; (8001604 <MX_GPIO_Init+0x104>)
 800157a:	f000 fdfb 	bl	8002174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800157e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001582:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001584:	4b20      	ldr	r3, [pc, #128]	; (8001608 <MX_GPIO_Init+0x108>)
 8001586:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800158c:	f107 030c 	add.w	r3, r7, #12
 8001590:	4619      	mov	r1, r3
 8001592:	481b      	ldr	r0, [pc, #108]	; (8001600 <MX_GPIO_Init+0x100>)
 8001594:	f000 fc54 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001598:	230f      	movs	r3, #15
 800159a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159c:	2301      	movs	r3, #1
 800159e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a8:	f107 030c 	add.w	r3, r7, #12
 80015ac:	4619      	mov	r1, r3
 80015ae:	4814      	ldr	r0, [pc, #80]	; (8001600 <MX_GPIO_Init+0x100>)
 80015b0:	f000 fc46 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015b4:	2320      	movs	r3, #32
 80015b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b8:	2301      	movs	r3, #1
 80015ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c4:	f107 030c 	add.w	r3, r7, #12
 80015c8:	4619      	mov	r1, r3
 80015ca:	480e      	ldr	r0, [pc, #56]	; (8001604 <MX_GPIO_Init+0x104>)
 80015cc:	f000 fc38 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015e2:	2302      	movs	r3, #2
 80015e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e6:	f107 030c 	add.w	r3, r7, #12
 80015ea:	4619      	mov	r1, r3
 80015ec:	4807      	ldr	r0, [pc, #28]	; (800160c <MX_GPIO_Init+0x10c>)
 80015ee:	f000 fc27 	bl	8001e40 <HAL_GPIO_Init>

}
 80015f2:	bf00      	nop
 80015f4:	3720      	adds	r7, #32
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800
 8001600:	40020800 	.word	0x40020800
 8001604:	40020000 	.word	0x40020000
 8001608:	10210000 	.word	0x10210000
 800160c:	40020400 	.word	0x40020400

08001610 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	7f1b      	ldrb	r3, [r3, #28]
 800161c:	2b04      	cmp	r3, #4
 800161e:	d12c      	bne.n	800167a <HAL_TIM_IC_CaptureCallback+0x6a>
		if(Is_First_Capture == 0){
 8001620:	4b18      	ldr	r3, [pc, #96]	; (8001684 <HAL_TIM_IC_CaptureCallback+0x74>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d10a      	bne.n	800163e <HAL_TIM_IC_CaptureCallback+0x2e>
			IC_Val1 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_3);
 8001628:	2108      	movs	r1, #8
 800162a:	4817      	ldr	r0, [pc, #92]	; (8001688 <HAL_TIM_IC_CaptureCallback+0x78>)
 800162c:	f001 fe70 	bl	8003310 <HAL_TIM_ReadCapturedValue>
 8001630:	4602      	mov	r2, r0
 8001632:	4b16      	ldr	r3, [pc, #88]	; (800168c <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001634:	601a      	str	r2, [r3, #0]
			Is_First_Capture = 1;
 8001636:	4b13      	ldr	r3, [pc, #76]	; (8001684 <HAL_TIM_IC_CaptureCallback+0x74>)
 8001638:	2201      	movs	r2, #1
 800163a:	601a      	str	r2, [r3, #0]
				Freq = F_CLK/(IC_Val2 - IC_Val1);
			}
			Is_First_Capture = 0;
		}
	}
}
 800163c:	e01d      	b.n	800167a <HAL_TIM_IC_CaptureCallback+0x6a>
		} else if(Is_First_Capture == 1){
 800163e:	4b11      	ldr	r3, [pc, #68]	; (8001684 <HAL_TIM_IC_CaptureCallback+0x74>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d119      	bne.n	800167a <HAL_TIM_IC_CaptureCallback+0x6a>
			IC_Val2 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_3);
 8001646:	2108      	movs	r1, #8
 8001648:	480f      	ldr	r0, [pc, #60]	; (8001688 <HAL_TIM_IC_CaptureCallback+0x78>)
 800164a:	f001 fe61 	bl	8003310 <HAL_TIM_ReadCapturedValue>
 800164e:	4602      	mov	r2, r0
 8001650:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001652:	601a      	str	r2, [r3, #0]
			if(IC_Val2 > IC_Val1){
 8001654:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <HAL_TIM_IC_CaptureCallback+0x7c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	429a      	cmp	r2, r3
 800165e:	d909      	bls.n	8001674 <HAL_TIM_IC_CaptureCallback+0x64>
				Freq = F_CLK/(IC_Val2 - IC_Val1);
 8001660:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b09      	ldr	r3, [pc, #36]	; (800168c <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <HAL_TIM_IC_CaptureCallback+0x84>)
 800166c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001670:	4a09      	ldr	r2, [pc, #36]	; (8001698 <HAL_TIM_IC_CaptureCallback+0x88>)
 8001672:	6013      	str	r3, [r2, #0]
			Is_First_Capture = 0;
 8001674:	4b03      	ldr	r3, [pc, #12]	; (8001684 <HAL_TIM_IC_CaptureCallback+0x74>)
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200000e0 	.word	0x200000e0
 8001688:	200000a0 	.word	0x200000a0
 800168c:	2000009c 	.word	0x2000009c
 8001690:	20000194 	.word	0x20000194
 8001694:	044aa200 	.word	0x044aa200
 8001698:	200000e8 	.word	0x200000e8

0800169c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a2:	e7fe      	b.n	80016a2 <Error_Handler+0x6>

080016a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <HAL_MspInit+0x4c>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	4a0f      	ldr	r2, [pc, #60]	; (80016f0 <HAL_MspInit+0x4c>)
 80016b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ba:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <HAL_MspInit+0x4c>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	603b      	str	r3, [r7, #0]
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <HAL_MspInit+0x4c>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	4a08      	ldr	r2, [pc, #32]	; (80016f0 <HAL_MspInit+0x4c>)
 80016d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d4:	6413      	str	r3, [r2, #64]	; 0x40
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_MspInit+0x4c>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016de:	603b      	str	r3, [r7, #0]
 80016e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016e2:	2007      	movs	r0, #7
 80016e4:	f000 fb6a 	bl	8001dbc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e8:	bf00      	nop
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40023800 	.word	0x40023800

080016f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08c      	sub	sp, #48	; 0x30
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 031c 	add.w	r3, r7, #28
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a31      	ldr	r2, [pc, #196]	; (80017d8 <HAL_TIM_Base_MspInit+0xe4>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d10e      	bne.n	8001734 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	61bb      	str	r3, [r7, #24]
 800171a:	4b30      	ldr	r3, [pc, #192]	; (80017dc <HAL_TIM_Base_MspInit+0xe8>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	4a2f      	ldr	r2, [pc, #188]	; (80017dc <HAL_TIM_Base_MspInit+0xe8>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6453      	str	r3, [r2, #68]	; 0x44
 8001726:	4b2d      	ldr	r3, [pc, #180]	; (80017dc <HAL_TIM_Base_MspInit+0xe8>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	61bb      	str	r3, [r7, #24]
 8001730:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001732:	e04c      	b.n	80017ce <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM2)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800173c:	d10e      	bne.n	800175c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	4b26      	ldr	r3, [pc, #152]	; (80017dc <HAL_TIM_Base_MspInit+0xe8>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	4a25      	ldr	r2, [pc, #148]	; (80017dc <HAL_TIM_Base_MspInit+0xe8>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6413      	str	r3, [r2, #64]	; 0x40
 800174e:	4b23      	ldr	r3, [pc, #140]	; (80017dc <HAL_TIM_Base_MspInit+0xe8>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	697b      	ldr	r3, [r7, #20]
}
 800175a:	e038      	b.n	80017ce <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM3)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a1f      	ldr	r2, [pc, #124]	; (80017e0 <HAL_TIM_Base_MspInit+0xec>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d133      	bne.n	80017ce <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <HAL_TIM_Base_MspInit+0xe8>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	4a1b      	ldr	r2, [pc, #108]	; (80017dc <HAL_TIM_Base_MspInit+0xe8>)
 8001770:	f043 0302 	orr.w	r3, r3, #2
 8001774:	6413      	str	r3, [r2, #64]	; 0x40
 8001776:	4b19      	ldr	r3, [pc, #100]	; (80017dc <HAL_TIM_Base_MspInit+0xe8>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <HAL_TIM_Base_MspInit+0xe8>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a14      	ldr	r2, [pc, #80]	; (80017dc <HAL_TIM_Base_MspInit+0xe8>)
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <HAL_TIM_Base_MspInit+0xe8>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800179e:	2301      	movs	r3, #1
 80017a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a2:	2302      	movs	r3, #2
 80017a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017aa:	2300      	movs	r3, #0
 80017ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017ae:	2302      	movs	r3, #2
 80017b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b2:	f107 031c 	add.w	r3, r7, #28
 80017b6:	4619      	mov	r1, r3
 80017b8:	480a      	ldr	r0, [pc, #40]	; (80017e4 <HAL_TIM_Base_MspInit+0xf0>)
 80017ba:	f000 fb41 	bl	8001e40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2100      	movs	r1, #0
 80017c2:	201d      	movs	r0, #29
 80017c4:	f000 fb05 	bl	8001dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017c8:	201d      	movs	r0, #29
 80017ca:	f000 fb1e 	bl	8001e0a <HAL_NVIC_EnableIRQ>
}
 80017ce:	bf00      	nop
 80017d0:	3730      	adds	r7, #48	; 0x30
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40010000 	.word	0x40010000
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40000400 	.word	0x40000400
 80017e4:	40020400 	.word	0x40020400

080017e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	; 0x28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a24      	ldr	r2, [pc, #144]	; (8001898 <HAL_TIM_MspPostInit+0xb0>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d11f      	bne.n	800184a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	4b23      	ldr	r3, [pc, #140]	; (800189c <HAL_TIM_MspPostInit+0xb4>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a22      	ldr	r2, [pc, #136]	; (800189c <HAL_TIM_MspPostInit+0xb4>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b20      	ldr	r3, [pc, #128]	; (800189c <HAL_TIM_MspPostInit+0xb4>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800182a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182c:	2302      	movs	r3, #2
 800182e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001834:	2300      	movs	r3, #0
 8001836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001838:	2301      	movs	r3, #1
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	4619      	mov	r1, r3
 8001842:	4817      	ldr	r0, [pc, #92]	; (80018a0 <HAL_TIM_MspPostInit+0xb8>)
 8001844:	f000 fafc 	bl	8001e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001848:	e022      	b.n	8001890 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001852:	d11d      	bne.n	8001890 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	4b10      	ldr	r3, [pc, #64]	; (800189c <HAL_TIM_MspPostInit+0xb4>)
 800185a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185c:	4a0f      	ldr	r2, [pc, #60]	; (800189c <HAL_TIM_MspPostInit+0xb4>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	6313      	str	r3, [r2, #48]	; 0x30
 8001864:	4b0d      	ldr	r3, [pc, #52]	; (800189c <HAL_TIM_MspPostInit+0xb4>)
 8001866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001870:	2303      	movs	r3, #3
 8001872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001880:	2301      	movs	r3, #1
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4619      	mov	r1, r3
 800188a:	4805      	ldr	r0, [pc, #20]	; (80018a0 <HAL_TIM_MspPostInit+0xb8>)
 800188c:	f000 fad8 	bl	8001e40 <HAL_GPIO_Init>
}
 8001890:	bf00      	nop
 8001892:	3728      	adds	r7, #40	; 0x28
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40010000 	.word	0x40010000
 800189c:	40023800 	.word	0x40023800
 80018a0:	40020000 	.word	0x40020000

080018a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08c      	sub	sp, #48	; 0x30
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 031c 	add.w	r3, r7, #28
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a32      	ldr	r2, [pc, #200]	; (800198c <HAL_UART_MspInit+0xe8>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d12c      	bne.n	8001920 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	61bb      	str	r3, [r7, #24]
 80018ca:	4b31      	ldr	r3, [pc, #196]	; (8001990 <HAL_UART_MspInit+0xec>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	4a30      	ldr	r2, [pc, #192]	; (8001990 <HAL_UART_MspInit+0xec>)
 80018d0:	f043 0310 	orr.w	r3, r3, #16
 80018d4:	6453      	str	r3, [r2, #68]	; 0x44
 80018d6:	4b2e      	ldr	r3, [pc, #184]	; (8001990 <HAL_UART_MspInit+0xec>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	f003 0310 	and.w	r3, r3, #16
 80018de:	61bb      	str	r3, [r7, #24]
 80018e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	4b2a      	ldr	r3, [pc, #168]	; (8001990 <HAL_UART_MspInit+0xec>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a29      	ldr	r2, [pc, #164]	; (8001990 <HAL_UART_MspInit+0xec>)
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b27      	ldr	r3, [pc, #156]	; (8001990 <HAL_UART_MspInit+0xec>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018fe:	23c0      	movs	r3, #192	; 0xc0
 8001900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190a:	2303      	movs	r3, #3
 800190c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800190e:	2307      	movs	r3, #7
 8001910:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001912:	f107 031c 	add.w	r3, r7, #28
 8001916:	4619      	mov	r1, r3
 8001918:	481e      	ldr	r0, [pc, #120]	; (8001994 <HAL_UART_MspInit+0xf0>)
 800191a:	f000 fa91 	bl	8001e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800191e:	e030      	b.n	8001982 <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART2)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a1c      	ldr	r2, [pc, #112]	; (8001998 <HAL_UART_MspInit+0xf4>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d12b      	bne.n	8001982 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	4b18      	ldr	r3, [pc, #96]	; (8001990 <HAL_UART_MspInit+0xec>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	4a17      	ldr	r2, [pc, #92]	; (8001990 <HAL_UART_MspInit+0xec>)
 8001934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001938:	6413      	str	r3, [r2, #64]	; 0x40
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <HAL_UART_MspInit+0xec>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	4b11      	ldr	r3, [pc, #68]	; (8001990 <HAL_UART_MspInit+0xec>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a10      	ldr	r2, [pc, #64]	; (8001990 <HAL_UART_MspInit+0xec>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <HAL_UART_MspInit+0xec>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001962:	230c      	movs	r3, #12
 8001964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001966:	2302      	movs	r3, #2
 8001968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196e:	2303      	movs	r3, #3
 8001970:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001972:	2307      	movs	r3, #7
 8001974:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001976:	f107 031c 	add.w	r3, r7, #28
 800197a:	4619      	mov	r1, r3
 800197c:	4807      	ldr	r0, [pc, #28]	; (800199c <HAL_UART_MspInit+0xf8>)
 800197e:	f000 fa5f 	bl	8001e40 <HAL_GPIO_Init>
}
 8001982:	bf00      	nop
 8001984:	3730      	adds	r7, #48	; 0x30
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40011000 	.word	0x40011000
 8001990:	40023800 	.word	0x40023800
 8001994:	40020400 	.word	0x40020400
 8001998:	40004400 	.word	0x40004400
 800199c:	40020000 	.word	0x40020000

080019a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <NMI_Handler+0x4>

080019a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019aa:	e7fe      	b.n	80019aa <HardFault_Handler+0x4>

080019ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <MemManage_Handler+0x4>

080019b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b6:	e7fe      	b.n	80019b6 <BusFault_Handler+0x4>

080019b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <UsageFault_Handler+0x4>

080019be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ec:	f000 f8d4 	bl	8001b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <TIM3_IRQHandler+0x10>)
 80019fa:	f001 f967 	bl	8002ccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200000a0 	.word	0x200000a0

08001a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a10:	4a14      	ldr	r2, [pc, #80]	; (8001a64 <_sbrk+0x5c>)
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <_sbrk+0x60>)
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a1c:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <_sbrk+0x64>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d102      	bne.n	8001a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a24:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <_sbrk+0x64>)
 8001a26:	4a12      	ldr	r2, [pc, #72]	; (8001a70 <_sbrk+0x68>)
 8001a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <_sbrk+0x64>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d207      	bcs.n	8001a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a38:	f002 fe40 	bl	80046bc <__errno>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	230c      	movs	r3, #12
 8001a40:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
 8001a46:	e009      	b.n	8001a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <_sbrk+0x64>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a4e:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <_sbrk+0x64>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	4a05      	ldr	r2, [pc, #20]	; (8001a6c <_sbrk+0x64>)
 8001a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20020000 	.word	0x20020000
 8001a68:	00000400 	.word	0x00000400
 8001a6c:	20000090 	.word	0x20000090
 8001a70:	20000268 	.word	0x20000268

08001a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a78:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <SystemInit+0x28>)
 8001a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a7e:	4a07      	ldr	r2, [pc, #28]	; (8001a9c <SystemInit+0x28>)
 8001a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a88:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <SystemInit+0x28>)
 8001a8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a8e:	609a      	str	r2, [r3, #8]
#endif
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001aa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ad8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001aa4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001aa6:	e003      	b.n	8001ab0 <LoopCopyDataInit>

08001aa8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001aaa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001aac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001aae:	3104      	adds	r1, #4

08001ab0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ab0:	480b      	ldr	r0, [pc, #44]	; (8001ae0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ab4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ab6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ab8:	d3f6      	bcc.n	8001aa8 <CopyDataInit>
  ldr  r2, =_sbss
 8001aba:	4a0b      	ldr	r2, [pc, #44]	; (8001ae8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001abc:	e002      	b.n	8001ac4 <LoopFillZerobss>

08001abe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001abe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ac0:	f842 3b04 	str.w	r3, [r2], #4

08001ac4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ac4:	4b09      	ldr	r3, [pc, #36]	; (8001aec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ac6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ac8:	d3f9      	bcc.n	8001abe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001aca:	f7ff ffd3 	bl	8001a74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ace:	f002 fdfb 	bl	80046c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ad2:	f7ff f955 	bl	8000d80 <main>
  bx  lr    
 8001ad6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ad8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001adc:	08004fac 	.word	0x08004fac
  ldr  r0, =_sdata
 8001ae0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ae4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001ae8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001aec:	20000264 	.word	0x20000264

08001af0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001af0:	e7fe      	b.n	8001af0 <ADC_IRQHandler>
	...

08001af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001af8:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <HAL_Init+0x40>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a0d      	ldr	r2, [pc, #52]	; (8001b34 <HAL_Init+0x40>)
 8001afe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <HAL_Init+0x40>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <HAL_Init+0x40>)
 8001b0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b10:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <HAL_Init+0x40>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a07      	ldr	r2, [pc, #28]	; (8001b34 <HAL_Init+0x40>)
 8001b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b1c:	2003      	movs	r0, #3
 8001b1e:	f000 f94d 	bl	8001dbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b22:	2000      	movs	r0, #0
 8001b24:	f000 f808 	bl	8001b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b28:	f7ff fdbc 	bl	80016a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40023c00 	.word	0x40023c00

08001b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <HAL_InitTick+0x54>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_InitTick+0x58>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 f965 	bl	8001e26 <HAL_SYSTICK_Config>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e00e      	b.n	8001b84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b0f      	cmp	r3, #15
 8001b6a:	d80a      	bhi.n	8001b82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	f04f 30ff 	mov.w	r0, #4294967295
 8001b74:	f000 f92d 	bl	8001dd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b78:	4a06      	ldr	r2, [pc, #24]	; (8001b94 <HAL_InitTick+0x5c>)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	e000      	b.n	8001b84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000000 	.word	0x20000000
 8001b90:	20000008 	.word	0x20000008
 8001b94:	20000004 	.word	0x20000004

08001b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_IncTick+0x20>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_IncTick+0x24>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	4a04      	ldr	r2, [pc, #16]	; (8001bbc <HAL_IncTick+0x24>)
 8001baa:	6013      	str	r3, [r2, #0]
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20000008 	.word	0x20000008
 8001bbc:	2000025c 	.word	0x2000025c

08001bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc4:	4b03      	ldr	r3, [pc, #12]	; (8001bd4 <HAL_GetTick+0x14>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	2000025c 	.word	0x2000025c

08001bd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be0:	f7ff ffee 	bl	8001bc0 <HAL_GetTick>
 8001be4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf0:	d005      	beq.n	8001bfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <HAL_Delay+0x40>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bfe:	bf00      	nop
 8001c00:	f7ff ffde 	bl	8001bc0 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d8f7      	bhi.n	8001c00 <HAL_Delay+0x28>
  {
  }
}
 8001c10:	bf00      	nop
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000008 	.word	0x20000008

08001c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <__NVIC_SetPriorityGrouping+0x44>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c38:	4013      	ands	r3, r2
 8001c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c4e:	4a04      	ldr	r2, [pc, #16]	; (8001c60 <__NVIC_SetPriorityGrouping+0x44>)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	60d3      	str	r3, [r2, #12]
}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c68:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <__NVIC_GetPriorityGrouping+0x18>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	0a1b      	lsrs	r3, r3, #8
 8001c6e:	f003 0307 	and.w	r3, r3, #7
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	db0b      	blt.n	8001caa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	f003 021f 	and.w	r2, r3, #31
 8001c98:	4907      	ldr	r1, [pc, #28]	; (8001cb8 <__NVIC_EnableIRQ+0x38>)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	095b      	lsrs	r3, r3, #5
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000e100 	.word	0xe000e100

08001cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	6039      	str	r1, [r7, #0]
 8001cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	db0a      	blt.n	8001ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	490c      	ldr	r1, [pc, #48]	; (8001d08 <__NVIC_SetPriority+0x4c>)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	0112      	lsls	r2, r2, #4
 8001cdc:	b2d2      	uxtb	r2, r2
 8001cde:	440b      	add	r3, r1
 8001ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce4:	e00a      	b.n	8001cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	4908      	ldr	r1, [pc, #32]	; (8001d0c <__NVIC_SetPriority+0x50>)
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	3b04      	subs	r3, #4
 8001cf4:	0112      	lsls	r2, r2, #4
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	761a      	strb	r2, [r3, #24]
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000e100 	.word	0xe000e100
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b089      	sub	sp, #36	; 0x24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f1c3 0307 	rsb	r3, r3, #7
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	bf28      	it	cs
 8001d2e:	2304      	movcs	r3, #4
 8001d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3304      	adds	r3, #4
 8001d36:	2b06      	cmp	r3, #6
 8001d38:	d902      	bls.n	8001d40 <NVIC_EncodePriority+0x30>
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3b03      	subs	r3, #3
 8001d3e:	e000      	b.n	8001d42 <NVIC_EncodePriority+0x32>
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d44:	f04f 32ff 	mov.w	r2, #4294967295
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43da      	mvns	r2, r3
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	401a      	ands	r2, r3
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d58:	f04f 31ff 	mov.w	r1, #4294967295
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d62:	43d9      	mvns	r1, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	4313      	orrs	r3, r2
         );
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3724      	adds	r7, #36	; 0x24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d88:	d301      	bcc.n	8001d8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e00f      	b.n	8001dae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <SysTick_Config+0x40>)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d96:	210f      	movs	r1, #15
 8001d98:	f04f 30ff 	mov.w	r0, #4294967295
 8001d9c:	f7ff ff8e 	bl	8001cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da0:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <SysTick_Config+0x40>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001da6:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <SysTick_Config+0x40>)
 8001da8:	2207      	movs	r2, #7
 8001daa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	e000e010 	.word	0xe000e010

08001dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7ff ff29 	bl	8001c1c <__NVIC_SetPriorityGrouping>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b086      	sub	sp, #24
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	4603      	mov	r3, r0
 8001dda:	60b9      	str	r1, [r7, #8]
 8001ddc:	607a      	str	r2, [r7, #4]
 8001dde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001de4:	f7ff ff3e 	bl	8001c64 <__NVIC_GetPriorityGrouping>
 8001de8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	68b9      	ldr	r1, [r7, #8]
 8001dee:	6978      	ldr	r0, [r7, #20]
 8001df0:	f7ff ff8e 	bl	8001d10 <NVIC_EncodePriority>
 8001df4:	4602      	mov	r2, r0
 8001df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ff5d 	bl	8001cbc <__NVIC_SetPriority>
}
 8001e02:	bf00      	nop
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b082      	sub	sp, #8
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	4603      	mov	r3, r0
 8001e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff31 	bl	8001c80 <__NVIC_EnableIRQ>
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff ffa2 	bl	8001d78 <SysTick_Config>
 8001e34:	4603      	mov	r3, r0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b089      	sub	sp, #36	; 0x24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
 8001e5a:	e159      	b.n	8002110 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	f040 8148 	bne.w	800210a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d00b      	beq.n	8001e9a <HAL_GPIO_Init+0x5a>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d007      	beq.n	8001e9a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e8e:	2b11      	cmp	r3, #17
 8001e90:	d003      	beq.n	8001e9a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b12      	cmp	r3, #18
 8001e98:	d130      	bne.n	8001efc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	091b      	lsrs	r3, r3, #4
 8001ee6:	f003 0201 	and.w	r2, r3, #1
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	2203      	movs	r2, #3
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d003      	beq.n	8001f3c <HAL_GPIO_Init+0xfc>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b12      	cmp	r3, #18
 8001f3a:	d123      	bne.n	8001f84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	08da      	lsrs	r2, r3, #3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3208      	adds	r2, #8
 8001f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	220f      	movs	r2, #15
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	691a      	ldr	r2, [r3, #16]
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	08da      	lsrs	r2, r3, #3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	3208      	adds	r2, #8
 8001f7e:	69b9      	ldr	r1, [r7, #24]
 8001f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	2203      	movs	r2, #3
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 0203 	and.w	r2, r3, #3
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 80a2 	beq.w	800210a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	4b56      	ldr	r3, [pc, #344]	; (8002124 <HAL_GPIO_Init+0x2e4>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	4a55      	ldr	r2, [pc, #340]	; (8002124 <HAL_GPIO_Init+0x2e4>)
 8001fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd6:	4b53      	ldr	r3, [pc, #332]	; (8002124 <HAL_GPIO_Init+0x2e4>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fe2:	4a51      	ldr	r2, [pc, #324]	; (8002128 <HAL_GPIO_Init+0x2e8>)
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	089b      	lsrs	r3, r3, #2
 8001fe8:	3302      	adds	r3, #2
 8001fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	220f      	movs	r2, #15
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a48      	ldr	r2, [pc, #288]	; (800212c <HAL_GPIO_Init+0x2ec>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d019      	beq.n	8002042 <HAL_GPIO_Init+0x202>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a47      	ldr	r2, [pc, #284]	; (8002130 <HAL_GPIO_Init+0x2f0>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d013      	beq.n	800203e <HAL_GPIO_Init+0x1fe>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a46      	ldr	r2, [pc, #280]	; (8002134 <HAL_GPIO_Init+0x2f4>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d00d      	beq.n	800203a <HAL_GPIO_Init+0x1fa>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a45      	ldr	r2, [pc, #276]	; (8002138 <HAL_GPIO_Init+0x2f8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d007      	beq.n	8002036 <HAL_GPIO_Init+0x1f6>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a44      	ldr	r2, [pc, #272]	; (800213c <HAL_GPIO_Init+0x2fc>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d101      	bne.n	8002032 <HAL_GPIO_Init+0x1f2>
 800202e:	2304      	movs	r3, #4
 8002030:	e008      	b.n	8002044 <HAL_GPIO_Init+0x204>
 8002032:	2307      	movs	r3, #7
 8002034:	e006      	b.n	8002044 <HAL_GPIO_Init+0x204>
 8002036:	2303      	movs	r3, #3
 8002038:	e004      	b.n	8002044 <HAL_GPIO_Init+0x204>
 800203a:	2302      	movs	r3, #2
 800203c:	e002      	b.n	8002044 <HAL_GPIO_Init+0x204>
 800203e:	2301      	movs	r3, #1
 8002040:	e000      	b.n	8002044 <HAL_GPIO_Init+0x204>
 8002042:	2300      	movs	r3, #0
 8002044:	69fa      	ldr	r2, [r7, #28]
 8002046:	f002 0203 	and.w	r2, r2, #3
 800204a:	0092      	lsls	r2, r2, #2
 800204c:	4093      	lsls	r3, r2
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4313      	orrs	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002054:	4934      	ldr	r1, [pc, #208]	; (8002128 <HAL_GPIO_Init+0x2e8>)
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	089b      	lsrs	r3, r3, #2
 800205a:	3302      	adds	r3, #2
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002062:	4b37      	ldr	r3, [pc, #220]	; (8002140 <HAL_GPIO_Init+0x300>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	43db      	mvns	r3, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4013      	ands	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002086:	4a2e      	ldr	r2, [pc, #184]	; (8002140 <HAL_GPIO_Init+0x300>)
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800208c:	4b2c      	ldr	r3, [pc, #176]	; (8002140 <HAL_GPIO_Init+0x300>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	43db      	mvns	r3, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020b0:	4a23      	ldr	r2, [pc, #140]	; (8002140 <HAL_GPIO_Init+0x300>)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020b6:	4b22      	ldr	r3, [pc, #136]	; (8002140 <HAL_GPIO_Init+0x300>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	43db      	mvns	r3, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4013      	ands	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020da:	4a19      	ldr	r2, [pc, #100]	; (8002140 <HAL_GPIO_Init+0x300>)
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020e0:	4b17      	ldr	r3, [pc, #92]	; (8002140 <HAL_GPIO_Init+0x300>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002104:	4a0e      	ldr	r2, [pc, #56]	; (8002140 <HAL_GPIO_Init+0x300>)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3301      	adds	r3, #1
 800210e:	61fb      	str	r3, [r7, #28]
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	2b0f      	cmp	r3, #15
 8002114:	f67f aea2 	bls.w	8001e5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002118:	bf00      	nop
 800211a:	3724      	adds	r7, #36	; 0x24
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	40023800 	.word	0x40023800
 8002128:	40013800 	.word	0x40013800
 800212c:	40020000 	.word	0x40020000
 8002130:	40020400 	.word	0x40020400
 8002134:	40020800 	.word	0x40020800
 8002138:	40020c00 	.word	0x40020c00
 800213c:	40021000 	.word	0x40021000
 8002140:	40013c00 	.word	0x40013c00

08002144 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691a      	ldr	r2, [r3, #16]
 8002154:	887b      	ldrh	r3, [r7, #2]
 8002156:	4013      	ands	r3, r2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d002      	beq.n	8002162 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800215c:	2301      	movs	r3, #1
 800215e:	73fb      	strb	r3, [r7, #15]
 8002160:	e001      	b.n	8002166 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002162:	2300      	movs	r3, #0
 8002164:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002166:	7bfb      	ldrb	r3, [r7, #15]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	807b      	strh	r3, [r7, #2]
 8002180:	4613      	mov	r3, r2
 8002182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002184:	787b      	ldrb	r3, [r7, #1]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800218a:	887a      	ldrh	r2, [r7, #2]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002190:	e003      	b.n	800219a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002192:	887b      	ldrh	r3, [r7, #2]
 8002194:	041a      	lsls	r2, r3, #16
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	619a      	str	r2, [r3, #24]
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
	...

080021a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e25b      	b.n	8002672 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d075      	beq.n	80022b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021c6:	4ba3      	ldr	r3, [pc, #652]	; (8002454 <HAL_RCC_OscConfig+0x2ac>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d00c      	beq.n	80021ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021d2:	4ba0      	ldr	r3, [pc, #640]	; (8002454 <HAL_RCC_OscConfig+0x2ac>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d112      	bne.n	8002204 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021de:	4b9d      	ldr	r3, [pc, #628]	; (8002454 <HAL_RCC_OscConfig+0x2ac>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021ea:	d10b      	bne.n	8002204 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ec:	4b99      	ldr	r3, [pc, #612]	; (8002454 <HAL_RCC_OscConfig+0x2ac>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d05b      	beq.n	80022b0 <HAL_RCC_OscConfig+0x108>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d157      	bne.n	80022b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e236      	b.n	8002672 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800220c:	d106      	bne.n	800221c <HAL_RCC_OscConfig+0x74>
 800220e:	4b91      	ldr	r3, [pc, #580]	; (8002454 <HAL_RCC_OscConfig+0x2ac>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a90      	ldr	r2, [pc, #576]	; (8002454 <HAL_RCC_OscConfig+0x2ac>)
 8002214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	e01d      	b.n	8002258 <HAL_RCC_OscConfig+0xb0>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002224:	d10c      	bne.n	8002240 <HAL_RCC_OscConfig+0x98>
 8002226:	4b8b      	ldr	r3, [pc, #556]	; (8002454 <HAL_RCC_OscConfig+0x2ac>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a8a      	ldr	r2, [pc, #552]	; (8002454 <HAL_RCC_OscConfig+0x2ac>)
 800222c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	4b88      	ldr	r3, [pc, #544]	; (8002454 <HAL_RCC_OscConfig+0x2ac>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a87      	ldr	r2, [pc, #540]	; (8002454 <HAL_RCC_OscConfig+0x2ac>)
 8002238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	e00b      	b.n	8002258 <HAL_RCC_OscConfig+0xb0>
 8002240:	4b84      	ldr	r3, [pc, #528]	; (8002454 <HAL_RCC_OscConfig+0x2ac>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a83      	ldr	r2, [pc, #524]	; (8002454 <HAL_RCC_OscConfig+0x2ac>)
 8002246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	4b81      	ldr	r3, [pc, #516]	; (8002454 <HAL_RCC_OscConfig+0x2ac>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a80      	ldr	r2, [pc, #512]	; (8002454 <HAL_RCC_OscConfig+0x2ac>)
 8002252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002256:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d013      	beq.n	8002288 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002260:	f7ff fcae 	bl	8001bc0 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002268:	f7ff fcaa 	bl	8001bc0 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b64      	cmp	r3, #100	; 0x64
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e1fb      	b.n	8002672 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227a:	4b76      	ldr	r3, [pc, #472]	; (8002454 <HAL_RCC_OscConfig+0x2ac>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0f0      	beq.n	8002268 <HAL_RCC_OscConfig+0xc0>
 8002286:	e014      	b.n	80022b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7ff fc9a 	bl	8001bc0 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002290:	f7ff fc96 	bl	8001bc0 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b64      	cmp	r3, #100	; 0x64
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e1e7      	b.n	8002672 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a2:	4b6c      	ldr	r3, [pc, #432]	; (8002454 <HAL_RCC_OscConfig+0x2ac>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0xe8>
 80022ae:	e000      	b.n	80022b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d063      	beq.n	8002386 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022be:	4b65      	ldr	r3, [pc, #404]	; (8002454 <HAL_RCC_OscConfig+0x2ac>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 030c 	and.w	r3, r3, #12
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00b      	beq.n	80022e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ca:	4b62      	ldr	r3, [pc, #392]	; (8002454 <HAL_RCC_OscConfig+0x2ac>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d11c      	bne.n	8002310 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022d6:	4b5f      	ldr	r3, [pc, #380]	; (8002454 <HAL_RCC_OscConfig+0x2ac>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d116      	bne.n	8002310 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e2:	4b5c      	ldr	r3, [pc, #368]	; (8002454 <HAL_RCC_OscConfig+0x2ac>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d005      	beq.n	80022fa <HAL_RCC_OscConfig+0x152>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d001      	beq.n	80022fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e1bb      	b.n	8002672 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022fa:	4b56      	ldr	r3, [pc, #344]	; (8002454 <HAL_RCC_OscConfig+0x2ac>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4952      	ldr	r1, [pc, #328]	; (8002454 <HAL_RCC_OscConfig+0x2ac>)
 800230a:	4313      	orrs	r3, r2
 800230c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800230e:	e03a      	b.n	8002386 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d020      	beq.n	800235a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002318:	4b4f      	ldr	r3, [pc, #316]	; (8002458 <HAL_RCC_OscConfig+0x2b0>)
 800231a:	2201      	movs	r2, #1
 800231c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231e:	f7ff fc4f 	bl	8001bc0 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002326:	f7ff fc4b 	bl	8001bc0 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e19c      	b.n	8002672 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002338:	4b46      	ldr	r3, [pc, #280]	; (8002454 <HAL_RCC_OscConfig+0x2ac>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0f0      	beq.n	8002326 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002344:	4b43      	ldr	r3, [pc, #268]	; (8002454 <HAL_RCC_OscConfig+0x2ac>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	4940      	ldr	r1, [pc, #256]	; (8002454 <HAL_RCC_OscConfig+0x2ac>)
 8002354:	4313      	orrs	r3, r2
 8002356:	600b      	str	r3, [r1, #0]
 8002358:	e015      	b.n	8002386 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800235a:	4b3f      	ldr	r3, [pc, #252]	; (8002458 <HAL_RCC_OscConfig+0x2b0>)
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002360:	f7ff fc2e 	bl	8001bc0 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002368:	f7ff fc2a 	bl	8001bc0 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e17b      	b.n	8002672 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237a:	4b36      	ldr	r3, [pc, #216]	; (8002454 <HAL_RCC_OscConfig+0x2ac>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f0      	bne.n	8002368 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d030      	beq.n	80023f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d016      	beq.n	80023c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800239a:	4b30      	ldr	r3, [pc, #192]	; (800245c <HAL_RCC_OscConfig+0x2b4>)
 800239c:	2201      	movs	r2, #1
 800239e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a0:	f7ff fc0e 	bl	8001bc0 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023a8:	f7ff fc0a 	bl	8001bc0 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e15b      	b.n	8002672 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ba:	4b26      	ldr	r3, [pc, #152]	; (8002454 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0x200>
 80023c6:	e015      	b.n	80023f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023c8:	4b24      	ldr	r3, [pc, #144]	; (800245c <HAL_RCC_OscConfig+0x2b4>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ce:	f7ff fbf7 	bl	8001bc0 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023d6:	f7ff fbf3 	bl	8001bc0 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e144      	b.n	8002672 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e8:	4b1a      	ldr	r3, [pc, #104]	; (8002454 <HAL_RCC_OscConfig+0x2ac>)
 80023ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1f0      	bne.n	80023d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 80a0 	beq.w	8002542 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002402:	2300      	movs	r3, #0
 8002404:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002406:	4b13      	ldr	r3, [pc, #76]	; (8002454 <HAL_RCC_OscConfig+0x2ac>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10f      	bne.n	8002432 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <HAL_RCC_OscConfig+0x2ac>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	4a0e      	ldr	r2, [pc, #56]	; (8002454 <HAL_RCC_OscConfig+0x2ac>)
 800241c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002420:	6413      	str	r3, [r2, #64]	; 0x40
 8002422:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <HAL_RCC_OscConfig+0x2ac>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242a:	60bb      	str	r3, [r7, #8]
 800242c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800242e:	2301      	movs	r3, #1
 8002430:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002432:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <HAL_RCC_OscConfig+0x2b8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243a:	2b00      	cmp	r3, #0
 800243c:	d121      	bne.n	8002482 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800243e:	4b08      	ldr	r3, [pc, #32]	; (8002460 <HAL_RCC_OscConfig+0x2b8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a07      	ldr	r2, [pc, #28]	; (8002460 <HAL_RCC_OscConfig+0x2b8>)
 8002444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800244a:	f7ff fbb9 	bl	8001bc0 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002450:	e011      	b.n	8002476 <HAL_RCC_OscConfig+0x2ce>
 8002452:	bf00      	nop
 8002454:	40023800 	.word	0x40023800
 8002458:	42470000 	.word	0x42470000
 800245c:	42470e80 	.word	0x42470e80
 8002460:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002464:	f7ff fbac 	bl	8001bc0 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e0fd      	b.n	8002672 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002476:	4b81      	ldr	r3, [pc, #516]	; (800267c <HAL_RCC_OscConfig+0x4d4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0f0      	beq.n	8002464 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d106      	bne.n	8002498 <HAL_RCC_OscConfig+0x2f0>
 800248a:	4b7d      	ldr	r3, [pc, #500]	; (8002680 <HAL_RCC_OscConfig+0x4d8>)
 800248c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248e:	4a7c      	ldr	r2, [pc, #496]	; (8002680 <HAL_RCC_OscConfig+0x4d8>)
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	6713      	str	r3, [r2, #112]	; 0x70
 8002496:	e01c      	b.n	80024d2 <HAL_RCC_OscConfig+0x32a>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	2b05      	cmp	r3, #5
 800249e:	d10c      	bne.n	80024ba <HAL_RCC_OscConfig+0x312>
 80024a0:	4b77      	ldr	r3, [pc, #476]	; (8002680 <HAL_RCC_OscConfig+0x4d8>)
 80024a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a4:	4a76      	ldr	r2, [pc, #472]	; (8002680 <HAL_RCC_OscConfig+0x4d8>)
 80024a6:	f043 0304 	orr.w	r3, r3, #4
 80024aa:	6713      	str	r3, [r2, #112]	; 0x70
 80024ac:	4b74      	ldr	r3, [pc, #464]	; (8002680 <HAL_RCC_OscConfig+0x4d8>)
 80024ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b0:	4a73      	ldr	r2, [pc, #460]	; (8002680 <HAL_RCC_OscConfig+0x4d8>)
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	6713      	str	r3, [r2, #112]	; 0x70
 80024b8:	e00b      	b.n	80024d2 <HAL_RCC_OscConfig+0x32a>
 80024ba:	4b71      	ldr	r3, [pc, #452]	; (8002680 <HAL_RCC_OscConfig+0x4d8>)
 80024bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024be:	4a70      	ldr	r2, [pc, #448]	; (8002680 <HAL_RCC_OscConfig+0x4d8>)
 80024c0:	f023 0301 	bic.w	r3, r3, #1
 80024c4:	6713      	str	r3, [r2, #112]	; 0x70
 80024c6:	4b6e      	ldr	r3, [pc, #440]	; (8002680 <HAL_RCC_OscConfig+0x4d8>)
 80024c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ca:	4a6d      	ldr	r2, [pc, #436]	; (8002680 <HAL_RCC_OscConfig+0x4d8>)
 80024cc:	f023 0304 	bic.w	r3, r3, #4
 80024d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d015      	beq.n	8002506 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024da:	f7ff fb71 	bl	8001bc0 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e0:	e00a      	b.n	80024f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e2:	f7ff fb6d 	bl	8001bc0 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e0bc      	b.n	8002672 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f8:	4b61      	ldr	r3, [pc, #388]	; (8002680 <HAL_RCC_OscConfig+0x4d8>)
 80024fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0ee      	beq.n	80024e2 <HAL_RCC_OscConfig+0x33a>
 8002504:	e014      	b.n	8002530 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002506:	f7ff fb5b 	bl	8001bc0 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800250c:	e00a      	b.n	8002524 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800250e:	f7ff fb57 	bl	8001bc0 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	f241 3288 	movw	r2, #5000	; 0x1388
 800251c:	4293      	cmp	r3, r2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e0a6      	b.n	8002672 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002524:	4b56      	ldr	r3, [pc, #344]	; (8002680 <HAL_RCC_OscConfig+0x4d8>)
 8002526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1ee      	bne.n	800250e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002530:	7dfb      	ldrb	r3, [r7, #23]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d105      	bne.n	8002542 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002536:	4b52      	ldr	r3, [pc, #328]	; (8002680 <HAL_RCC_OscConfig+0x4d8>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	4a51      	ldr	r2, [pc, #324]	; (8002680 <HAL_RCC_OscConfig+0x4d8>)
 800253c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002540:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 8092 	beq.w	8002670 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800254c:	4b4c      	ldr	r3, [pc, #304]	; (8002680 <HAL_RCC_OscConfig+0x4d8>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 030c 	and.w	r3, r3, #12
 8002554:	2b08      	cmp	r3, #8
 8002556:	d05c      	beq.n	8002612 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	2b02      	cmp	r3, #2
 800255e:	d141      	bne.n	80025e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002560:	4b48      	ldr	r3, [pc, #288]	; (8002684 <HAL_RCC_OscConfig+0x4dc>)
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002566:	f7ff fb2b 	bl	8001bc0 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800256e:	f7ff fb27 	bl	8001bc0 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e078      	b.n	8002672 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002580:	4b3f      	ldr	r3, [pc, #252]	; (8002680 <HAL_RCC_OscConfig+0x4d8>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1f0      	bne.n	800256e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69da      	ldr	r2, [r3, #28]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	431a      	orrs	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259a:	019b      	lsls	r3, r3, #6
 800259c:	431a      	orrs	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a2:	085b      	lsrs	r3, r3, #1
 80025a4:	3b01      	subs	r3, #1
 80025a6:	041b      	lsls	r3, r3, #16
 80025a8:	431a      	orrs	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ae:	061b      	lsls	r3, r3, #24
 80025b0:	4933      	ldr	r1, [pc, #204]	; (8002680 <HAL_RCC_OscConfig+0x4d8>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025b6:	4b33      	ldr	r3, [pc, #204]	; (8002684 <HAL_RCC_OscConfig+0x4dc>)
 80025b8:	2201      	movs	r2, #1
 80025ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025bc:	f7ff fb00 	bl	8001bc0 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c4:	f7ff fafc 	bl	8001bc0 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e04d      	b.n	8002672 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d6:	4b2a      	ldr	r3, [pc, #168]	; (8002680 <HAL_RCC_OscConfig+0x4d8>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f0      	beq.n	80025c4 <HAL_RCC_OscConfig+0x41c>
 80025e2:	e045      	b.n	8002670 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e4:	4b27      	ldr	r3, [pc, #156]	; (8002684 <HAL_RCC_OscConfig+0x4dc>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ea:	f7ff fae9 	bl	8001bc0 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f2:	f7ff fae5 	bl	8001bc0 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e036      	b.n	8002672 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002604:	4b1e      	ldr	r3, [pc, #120]	; (8002680 <HAL_RCC_OscConfig+0x4d8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1f0      	bne.n	80025f2 <HAL_RCC_OscConfig+0x44a>
 8002610:	e02e      	b.n	8002670 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d101      	bne.n	800261e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e029      	b.n	8002672 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800261e:	4b18      	ldr	r3, [pc, #96]	; (8002680 <HAL_RCC_OscConfig+0x4d8>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	429a      	cmp	r2, r3
 8002630:	d11c      	bne.n	800266c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800263c:	429a      	cmp	r2, r3
 800263e:	d115      	bne.n	800266c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002646:	4013      	ands	r3, r2
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800264c:	4293      	cmp	r3, r2
 800264e:	d10d      	bne.n	800266c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800265a:	429a      	cmp	r2, r3
 800265c:	d106      	bne.n	800266c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002668:	429a      	cmp	r2, r3
 800266a:	d001      	beq.n	8002670 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e000      	b.n	8002672 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40007000 	.word	0x40007000
 8002680:	40023800 	.word	0x40023800
 8002684:	42470060 	.word	0x42470060

08002688 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e0cc      	b.n	8002836 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800269c:	4b68      	ldr	r3, [pc, #416]	; (8002840 <HAL_RCC_ClockConfig+0x1b8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 030f 	and.w	r3, r3, #15
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d90c      	bls.n	80026c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026aa:	4b65      	ldr	r3, [pc, #404]	; (8002840 <HAL_RCC_ClockConfig+0x1b8>)
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b2:	4b63      	ldr	r3, [pc, #396]	; (8002840 <HAL_RCC_ClockConfig+0x1b8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d001      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e0b8      	b.n	8002836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d020      	beq.n	8002712 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026dc:	4b59      	ldr	r3, [pc, #356]	; (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	4a58      	ldr	r2, [pc, #352]	; (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d005      	beq.n	8002700 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026f4:	4b53      	ldr	r3, [pc, #332]	; (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	4a52      	ldr	r2, [pc, #328]	; (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 80026fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002700:	4b50      	ldr	r3, [pc, #320]	; (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	494d      	ldr	r1, [pc, #308]	; (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 800270e:	4313      	orrs	r3, r2
 8002710:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d044      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d107      	bne.n	8002736 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002726:	4b47      	ldr	r3, [pc, #284]	; (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d119      	bne.n	8002766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e07f      	b.n	8002836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b02      	cmp	r3, #2
 800273c:	d003      	beq.n	8002746 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002742:	2b03      	cmp	r3, #3
 8002744:	d107      	bne.n	8002756 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002746:	4b3f      	ldr	r3, [pc, #252]	; (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d109      	bne.n	8002766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e06f      	b.n	8002836 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002756:	4b3b      	ldr	r3, [pc, #236]	; (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e067      	b.n	8002836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002766:	4b37      	ldr	r3, [pc, #220]	; (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f023 0203 	bic.w	r2, r3, #3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	4934      	ldr	r1, [pc, #208]	; (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 8002774:	4313      	orrs	r3, r2
 8002776:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002778:	f7ff fa22 	bl	8001bc0 <HAL_GetTick>
 800277c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277e:	e00a      	b.n	8002796 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002780:	f7ff fa1e 	bl	8001bc0 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	f241 3288 	movw	r2, #5000	; 0x1388
 800278e:	4293      	cmp	r3, r2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e04f      	b.n	8002836 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002796:	4b2b      	ldr	r3, [pc, #172]	; (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 020c 	and.w	r2, r3, #12
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d1eb      	bne.n	8002780 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027a8:	4b25      	ldr	r3, [pc, #148]	; (8002840 <HAL_RCC_ClockConfig+0x1b8>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 030f 	and.w	r3, r3, #15
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d20c      	bcs.n	80027d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b6:	4b22      	ldr	r3, [pc, #136]	; (8002840 <HAL_RCC_ClockConfig+0x1b8>)
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027be:	4b20      	ldr	r3, [pc, #128]	; (8002840 <HAL_RCC_ClockConfig+0x1b8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d001      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e032      	b.n	8002836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d008      	beq.n	80027ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027dc:	4b19      	ldr	r3, [pc, #100]	; (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	4916      	ldr	r1, [pc, #88]	; (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0308 	and.w	r3, r3, #8
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d009      	beq.n	800280e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027fa:	4b12      	ldr	r3, [pc, #72]	; (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	490e      	ldr	r1, [pc, #56]	; (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 800280a:	4313      	orrs	r3, r2
 800280c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800280e:	f000 f821 	bl	8002854 <HAL_RCC_GetSysClockFreq>
 8002812:	4601      	mov	r1, r0
 8002814:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	091b      	lsrs	r3, r3, #4
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	4a0a      	ldr	r2, [pc, #40]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 8002820:	5cd3      	ldrb	r3, [r2, r3]
 8002822:	fa21 f303 	lsr.w	r3, r1, r3
 8002826:	4a09      	ldr	r2, [pc, #36]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800282a:	4b09      	ldr	r3, [pc, #36]	; (8002850 <HAL_RCC_ClockConfig+0x1c8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff f982 	bl	8001b38 <HAL_InitTick>

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40023c00 	.word	0x40023c00
 8002844:	40023800 	.word	0x40023800
 8002848:	08004f50 	.word	0x08004f50
 800284c:	20000000 	.word	0x20000000
 8002850:	20000004 	.word	0x20000004

08002854 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800285a:	2300      	movs	r3, #0
 800285c:	607b      	str	r3, [r7, #4]
 800285e:	2300      	movs	r3, #0
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	2300      	movs	r3, #0
 8002864:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002866:	2300      	movs	r3, #0
 8002868:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800286a:	4b63      	ldr	r3, [pc, #396]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 030c 	and.w	r3, r3, #12
 8002872:	2b04      	cmp	r3, #4
 8002874:	d007      	beq.n	8002886 <HAL_RCC_GetSysClockFreq+0x32>
 8002876:	2b08      	cmp	r3, #8
 8002878:	d008      	beq.n	800288c <HAL_RCC_GetSysClockFreq+0x38>
 800287a:	2b00      	cmp	r3, #0
 800287c:	f040 80b4 	bne.w	80029e8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002880:	4b5e      	ldr	r3, [pc, #376]	; (80029fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002882:	60bb      	str	r3, [r7, #8]
       break;
 8002884:	e0b3      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002886:	4b5e      	ldr	r3, [pc, #376]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002888:	60bb      	str	r3, [r7, #8]
      break;
 800288a:	e0b0      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800288c:	4b5a      	ldr	r3, [pc, #360]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002894:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002896:	4b58      	ldr	r3, [pc, #352]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d04a      	beq.n	8002938 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028a2:	4b55      	ldr	r3, [pc, #340]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	099b      	lsrs	r3, r3, #6
 80028a8:	f04f 0400 	mov.w	r4, #0
 80028ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	ea03 0501 	and.w	r5, r3, r1
 80028b8:	ea04 0602 	and.w	r6, r4, r2
 80028bc:	4629      	mov	r1, r5
 80028be:	4632      	mov	r2, r6
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	f04f 0400 	mov.w	r4, #0
 80028c8:	0154      	lsls	r4, r2, #5
 80028ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028ce:	014b      	lsls	r3, r1, #5
 80028d0:	4619      	mov	r1, r3
 80028d2:	4622      	mov	r2, r4
 80028d4:	1b49      	subs	r1, r1, r5
 80028d6:	eb62 0206 	sbc.w	r2, r2, r6
 80028da:	f04f 0300 	mov.w	r3, #0
 80028de:	f04f 0400 	mov.w	r4, #0
 80028e2:	0194      	lsls	r4, r2, #6
 80028e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80028e8:	018b      	lsls	r3, r1, #6
 80028ea:	1a5b      	subs	r3, r3, r1
 80028ec:	eb64 0402 	sbc.w	r4, r4, r2
 80028f0:	f04f 0100 	mov.w	r1, #0
 80028f4:	f04f 0200 	mov.w	r2, #0
 80028f8:	00e2      	lsls	r2, r4, #3
 80028fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80028fe:	00d9      	lsls	r1, r3, #3
 8002900:	460b      	mov	r3, r1
 8002902:	4614      	mov	r4, r2
 8002904:	195b      	adds	r3, r3, r5
 8002906:	eb44 0406 	adc.w	r4, r4, r6
 800290a:	f04f 0100 	mov.w	r1, #0
 800290e:	f04f 0200 	mov.w	r2, #0
 8002912:	0262      	lsls	r2, r4, #9
 8002914:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002918:	0259      	lsls	r1, r3, #9
 800291a:	460b      	mov	r3, r1
 800291c:	4614      	mov	r4, r2
 800291e:	4618      	mov	r0, r3
 8002920:	4621      	mov	r1, r4
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f04f 0400 	mov.w	r4, #0
 8002928:	461a      	mov	r2, r3
 800292a:	4623      	mov	r3, r4
 800292c:	f7fe f8a6 	bl	8000a7c <__aeabi_uldivmod>
 8002930:	4603      	mov	r3, r0
 8002932:	460c      	mov	r4, r1
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	e049      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002938:	4b2f      	ldr	r3, [pc, #188]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	099b      	lsrs	r3, r3, #6
 800293e:	f04f 0400 	mov.w	r4, #0
 8002942:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002946:	f04f 0200 	mov.w	r2, #0
 800294a:	ea03 0501 	and.w	r5, r3, r1
 800294e:	ea04 0602 	and.w	r6, r4, r2
 8002952:	4629      	mov	r1, r5
 8002954:	4632      	mov	r2, r6
 8002956:	f04f 0300 	mov.w	r3, #0
 800295a:	f04f 0400 	mov.w	r4, #0
 800295e:	0154      	lsls	r4, r2, #5
 8002960:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002964:	014b      	lsls	r3, r1, #5
 8002966:	4619      	mov	r1, r3
 8002968:	4622      	mov	r2, r4
 800296a:	1b49      	subs	r1, r1, r5
 800296c:	eb62 0206 	sbc.w	r2, r2, r6
 8002970:	f04f 0300 	mov.w	r3, #0
 8002974:	f04f 0400 	mov.w	r4, #0
 8002978:	0194      	lsls	r4, r2, #6
 800297a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800297e:	018b      	lsls	r3, r1, #6
 8002980:	1a5b      	subs	r3, r3, r1
 8002982:	eb64 0402 	sbc.w	r4, r4, r2
 8002986:	f04f 0100 	mov.w	r1, #0
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	00e2      	lsls	r2, r4, #3
 8002990:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002994:	00d9      	lsls	r1, r3, #3
 8002996:	460b      	mov	r3, r1
 8002998:	4614      	mov	r4, r2
 800299a:	195b      	adds	r3, r3, r5
 800299c:	eb44 0406 	adc.w	r4, r4, r6
 80029a0:	f04f 0100 	mov.w	r1, #0
 80029a4:	f04f 0200 	mov.w	r2, #0
 80029a8:	02a2      	lsls	r2, r4, #10
 80029aa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80029ae:	0299      	lsls	r1, r3, #10
 80029b0:	460b      	mov	r3, r1
 80029b2:	4614      	mov	r4, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	4621      	mov	r1, r4
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f04f 0400 	mov.w	r4, #0
 80029be:	461a      	mov	r2, r3
 80029c0:	4623      	mov	r3, r4
 80029c2:	f7fe f85b 	bl	8000a7c <__aeabi_uldivmod>
 80029c6:	4603      	mov	r3, r0
 80029c8:	460c      	mov	r4, r1
 80029ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029cc:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	0c1b      	lsrs	r3, r3, #16
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	3301      	adds	r3, #1
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e4:	60bb      	str	r3, [r7, #8]
      break;
 80029e6:	e002      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029e8:	4b04      	ldr	r3, [pc, #16]	; (80029fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80029ea:	60bb      	str	r3, [r7, #8]
      break;
 80029ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ee:	68bb      	ldr	r3, [r7, #8]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029f8:	40023800 	.word	0x40023800
 80029fc:	00f42400 	.word	0x00f42400
 8002a00:	007a1200 	.word	0x007a1200

08002a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a08:	4b03      	ldr	r3, [pc, #12]	; (8002a18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	20000000 	.word	0x20000000

08002a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a20:	f7ff fff0 	bl	8002a04 <HAL_RCC_GetHCLKFreq>
 8002a24:	4601      	mov	r1, r0
 8002a26:	4b05      	ldr	r3, [pc, #20]	; (8002a3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	0a9b      	lsrs	r3, r3, #10
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	4a03      	ldr	r2, [pc, #12]	; (8002a40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a32:	5cd3      	ldrb	r3, [r2, r3]
 8002a34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	08004f60 	.word	0x08004f60

08002a44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a48:	f7ff ffdc 	bl	8002a04 <HAL_RCC_GetHCLKFreq>
 8002a4c:	4601      	mov	r1, r0
 8002a4e:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	0b5b      	lsrs	r3, r3, #13
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	4a03      	ldr	r2, [pc, #12]	; (8002a68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a5a:	5cd3      	ldrb	r3, [r2, r3]
 8002a5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40023800 	.word	0x40023800
 8002a68:	08004f60 	.word	0x08004f60

08002a6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e01d      	b.n	8002aba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d106      	bne.n	8002a98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7fe fe2e 	bl	80016f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4610      	mov	r0, r2
 8002aac:	f000 fc9c 	bl	80033e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e01d      	b.n	8002b10 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d106      	bne.n	8002aee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f815 	bl	8002b18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2202      	movs	r2, #2
 8002af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3304      	adds	r3, #4
 8002afe:	4619      	mov	r1, r3
 8002b00:	4610      	mov	r0, r2
 8002b02:	f000 fc71 	bl	80033e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	6839      	ldr	r1, [r7, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f001 f816 	bl	8003b70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a10      	ldr	r2, [pc, #64]	; (8002b8c <HAL_TIM_PWM_Start+0x60>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d107      	bne.n	8002b5e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2b06      	cmp	r3, #6
 8002b6e:	d007      	beq.n	8002b80 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0201 	orr.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40010000 	.word	0x40010000

08002b90 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e01d      	b.n	8002bde <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d106      	bne.n	8002bbc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f815 	bl	8002be6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3304      	adds	r3, #4
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4610      	mov	r0, r2
 8002bd0:	f000 fc0a 	bl	80033e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
	...

08002bfc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2b0c      	cmp	r3, #12
 8002c0a:	d841      	bhi.n	8002c90 <HAL_TIM_IC_Start_IT+0x94>
 8002c0c:	a201      	add	r2, pc, #4	; (adr r2, 8002c14 <HAL_TIM_IC_Start_IT+0x18>)
 8002c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c12:	bf00      	nop
 8002c14:	08002c49 	.word	0x08002c49
 8002c18:	08002c91 	.word	0x08002c91
 8002c1c:	08002c91 	.word	0x08002c91
 8002c20:	08002c91 	.word	0x08002c91
 8002c24:	08002c5b 	.word	0x08002c5b
 8002c28:	08002c91 	.word	0x08002c91
 8002c2c:	08002c91 	.word	0x08002c91
 8002c30:	08002c91 	.word	0x08002c91
 8002c34:	08002c6d 	.word	0x08002c6d
 8002c38:	08002c91 	.word	0x08002c91
 8002c3c:	08002c91 	.word	0x08002c91
 8002c40:	08002c91 	.word	0x08002c91
 8002c44:	08002c7f 	.word	0x08002c7f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0202 	orr.w	r2, r2, #2
 8002c56:	60da      	str	r2, [r3, #12]
      break;
 8002c58:	e01b      	b.n	8002c92 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68da      	ldr	r2, [r3, #12]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f042 0204 	orr.w	r2, r2, #4
 8002c68:	60da      	str	r2, [r3, #12]
      break;
 8002c6a:	e012      	b.n	8002c92 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0208 	orr.w	r2, r2, #8
 8002c7a:	60da      	str	r2, [r3, #12]
      break;
 8002c7c:	e009      	b.n	8002c92 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f042 0210 	orr.w	r2, r2, #16
 8002c8c:	60da      	str	r2, [r3, #12]
      break;
 8002c8e:	e000      	b.n	8002c92 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8002c90:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2201      	movs	r2, #1
 8002c98:	6839      	ldr	r1, [r7, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 ff68 	bl	8003b70 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2b06      	cmp	r3, #6
 8002cb0:	d007      	beq.n	8002cc2 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f042 0201 	orr.w	r2, r2, #1
 8002cc0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d122      	bne.n	8002d28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d11b      	bne.n	8002d28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f06f 0202 	mvn.w	r2, #2
 8002cf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7fe fc7e 	bl	8001610 <HAL_TIM_IC_CaptureCallback>
 8002d14:	e005      	b.n	8002d22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 fb48 	bl	80033ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 fb4f 	bl	80033c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	f003 0304 	and.w	r3, r3, #4
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	d122      	bne.n	8002d7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b04      	cmp	r3, #4
 8002d42:	d11b      	bne.n	8002d7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f06f 0204 	mvn.w	r2, #4
 8002d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2202      	movs	r2, #2
 8002d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7fe fc54 	bl	8001610 <HAL_TIM_IC_CaptureCallback>
 8002d68:	e005      	b.n	8002d76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 fb1e 	bl	80033ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 fb25 	bl	80033c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b08      	cmp	r3, #8
 8002d88:	d122      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d11b      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f06f 0208 	mvn.w	r2, #8
 8002da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2204      	movs	r2, #4
 8002da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7fe fc2a 	bl	8001610 <HAL_TIM_IC_CaptureCallback>
 8002dbc:	e005      	b.n	8002dca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 faf4 	bl	80033ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 fafb 	bl	80033c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	f003 0310 	and.w	r3, r3, #16
 8002dda:	2b10      	cmp	r3, #16
 8002ddc:	d122      	bne.n	8002e24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f003 0310 	and.w	r3, r3, #16
 8002de8:	2b10      	cmp	r3, #16
 8002dea:	d11b      	bne.n	8002e24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f06f 0210 	mvn.w	r2, #16
 8002df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2208      	movs	r2, #8
 8002dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7fe fc00 	bl	8001610 <HAL_TIM_IC_CaptureCallback>
 8002e10:	e005      	b.n	8002e1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 faca 	bl	80033ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 fad1 	bl	80033c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d10e      	bne.n	8002e50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d107      	bne.n	8002e50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f06f 0201 	mvn.w	r2, #1
 8002e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 faa4 	bl	8003398 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e5a:	2b80      	cmp	r3, #128	; 0x80
 8002e5c:	d10e      	bne.n	8002e7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e68:	2b80      	cmp	r3, #128	; 0x80
 8002e6a:	d107      	bne.n	8002e7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 ff6a 	bl	8003d50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e86:	2b40      	cmp	r3, #64	; 0x40
 8002e88:	d10e      	bne.n	8002ea8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e94:	2b40      	cmp	r3, #64	; 0x40
 8002e96:	d107      	bne.n	8002ea8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 fa96 	bl	80033d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	f003 0320 	and.w	r3, r3, #32
 8002eb2:	2b20      	cmp	r3, #32
 8002eb4:	d10e      	bne.n	8002ed4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f003 0320 	and.w	r3, r3, #32
 8002ec0:	2b20      	cmp	r3, #32
 8002ec2:	d107      	bne.n	8002ed4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f06f 0220 	mvn.w	r2, #32
 8002ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 ff34 	bl	8003d3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ed4:	bf00      	nop
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d101      	bne.n	8002ef6 <HAL_TIM_IC_ConfigChannel+0x1a>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e08a      	b.n	800300c <HAL_TIM_IC_ConfigChannel+0x130>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2202      	movs	r2, #2
 8002f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d11b      	bne.n	8002f44 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6818      	ldr	r0, [r3, #0]
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	6819      	ldr	r1, [r3, #0]
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f000 fc70 	bl	8003800 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699a      	ldr	r2, [r3, #24]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 020c 	bic.w	r2, r2, #12
 8002f2e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6999      	ldr	r1, [r3, #24]
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	619a      	str	r2, [r3, #24]
 8002f42:	e05a      	b.n	8002ffa <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d11c      	bne.n	8002f84 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6818      	ldr	r0, [r3, #0]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	6819      	ldr	r1, [r3, #0]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f000 fce8 	bl	800392e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	699a      	ldr	r2, [r3, #24]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002f6c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6999      	ldr	r1, [r3, #24]
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	021a      	lsls	r2, r3, #8
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	619a      	str	r2, [r3, #24]
 8002f82:	e03a      	b.n	8002ffa <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d11b      	bne.n	8002fc2 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6818      	ldr	r0, [r3, #0]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	6819      	ldr	r1, [r3, #0]
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f000 fd35 	bl	8003a08 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	69da      	ldr	r2, [r3, #28]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 020c 	bic.w	r2, r2, #12
 8002fac:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	69d9      	ldr	r1, [r3, #28]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	61da      	str	r2, [r3, #28]
 8002fc0:	e01b      	b.n	8002ffa <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6818      	ldr	r0, [r3, #0]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	6819      	ldr	r1, [r3, #0]
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f000 fd55 	bl	8003a80 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	69da      	ldr	r2, [r3, #28]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002fe4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	69d9      	ldr	r1, [r3, #28]
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	021a      	lsls	r2, r3, #8
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003026:	2b01      	cmp	r3, #1
 8003028:	d101      	bne.n	800302e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800302a:	2302      	movs	r3, #2
 800302c:	e0b4      	b.n	8003198 <HAL_TIM_PWM_ConfigChannel+0x184>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2202      	movs	r2, #2
 800303a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b0c      	cmp	r3, #12
 8003042:	f200 809f 	bhi.w	8003184 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003046:	a201      	add	r2, pc, #4	; (adr r2, 800304c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304c:	08003081 	.word	0x08003081
 8003050:	08003185 	.word	0x08003185
 8003054:	08003185 	.word	0x08003185
 8003058:	08003185 	.word	0x08003185
 800305c:	080030c1 	.word	0x080030c1
 8003060:	08003185 	.word	0x08003185
 8003064:	08003185 	.word	0x08003185
 8003068:	08003185 	.word	0x08003185
 800306c:	08003103 	.word	0x08003103
 8003070:	08003185 	.word	0x08003185
 8003074:	08003185 	.word	0x08003185
 8003078:	08003185 	.word	0x08003185
 800307c:	08003143 	.word	0x08003143
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68b9      	ldr	r1, [r7, #8]
 8003086:	4618      	mov	r0, r3
 8003088:	f000 fa2e 	bl	80034e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699a      	ldr	r2, [r3, #24]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 0208 	orr.w	r2, r2, #8
 800309a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	699a      	ldr	r2, [r3, #24]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0204 	bic.w	r2, r2, #4
 80030aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6999      	ldr	r1, [r3, #24]
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	691a      	ldr	r2, [r3, #16]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	619a      	str	r2, [r3, #24]
      break;
 80030be:	e062      	b.n	8003186 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68b9      	ldr	r1, [r7, #8]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fa74 	bl	80035b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699a      	ldr	r2, [r3, #24]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	699a      	ldr	r2, [r3, #24]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6999      	ldr	r1, [r3, #24]
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	021a      	lsls	r2, r3, #8
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	619a      	str	r2, [r3, #24]
      break;
 8003100:	e041      	b.n	8003186 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68b9      	ldr	r1, [r7, #8]
 8003108:	4618      	mov	r0, r3
 800310a:	f000 fabf 	bl	800368c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	69da      	ldr	r2, [r3, #28]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f042 0208 	orr.w	r2, r2, #8
 800311c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	69da      	ldr	r2, [r3, #28]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0204 	bic.w	r2, r2, #4
 800312c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	69d9      	ldr	r1, [r3, #28]
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	61da      	str	r2, [r3, #28]
      break;
 8003140:	e021      	b.n	8003186 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68b9      	ldr	r1, [r7, #8]
 8003148:	4618      	mov	r0, r3
 800314a:	f000 fb09 	bl	8003760 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	69da      	ldr	r2, [r3, #28]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800315c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	69da      	ldr	r2, [r3, #28]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800316c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	69d9      	ldr	r1, [r3, #28]
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	021a      	lsls	r2, r3, #8
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	61da      	str	r2, [r3, #28]
      break;
 8003182:	e000      	b.n	8003186 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003184:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_TIM_ConfigClockSource+0x18>
 80031b4:	2302      	movs	r3, #2
 80031b6:	e0a6      	b.n	8003306 <HAL_TIM_ConfigClockSource+0x166>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2b40      	cmp	r3, #64	; 0x40
 80031ee:	d067      	beq.n	80032c0 <HAL_TIM_ConfigClockSource+0x120>
 80031f0:	2b40      	cmp	r3, #64	; 0x40
 80031f2:	d80b      	bhi.n	800320c <HAL_TIM_ConfigClockSource+0x6c>
 80031f4:	2b10      	cmp	r3, #16
 80031f6:	d073      	beq.n	80032e0 <HAL_TIM_ConfigClockSource+0x140>
 80031f8:	2b10      	cmp	r3, #16
 80031fa:	d802      	bhi.n	8003202 <HAL_TIM_ConfigClockSource+0x62>
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d06f      	beq.n	80032e0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003200:	e078      	b.n	80032f4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003202:	2b20      	cmp	r3, #32
 8003204:	d06c      	beq.n	80032e0 <HAL_TIM_ConfigClockSource+0x140>
 8003206:	2b30      	cmp	r3, #48	; 0x30
 8003208:	d06a      	beq.n	80032e0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800320a:	e073      	b.n	80032f4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800320c:	2b70      	cmp	r3, #112	; 0x70
 800320e:	d00d      	beq.n	800322c <HAL_TIM_ConfigClockSource+0x8c>
 8003210:	2b70      	cmp	r3, #112	; 0x70
 8003212:	d804      	bhi.n	800321e <HAL_TIM_ConfigClockSource+0x7e>
 8003214:	2b50      	cmp	r3, #80	; 0x50
 8003216:	d033      	beq.n	8003280 <HAL_TIM_ConfigClockSource+0xe0>
 8003218:	2b60      	cmp	r3, #96	; 0x60
 800321a:	d041      	beq.n	80032a0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800321c:	e06a      	b.n	80032f4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800321e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003222:	d066      	beq.n	80032f2 <HAL_TIM_ConfigClockSource+0x152>
 8003224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003228:	d017      	beq.n	800325a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800322a:	e063      	b.n	80032f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6818      	ldr	r0, [r3, #0]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	6899      	ldr	r1, [r3, #8]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f000 fc78 	bl	8003b30 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800324e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	609a      	str	r2, [r3, #8]
      break;
 8003258:	e04c      	b.n	80032f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	6899      	ldr	r1, [r3, #8]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f000 fc61 	bl	8003b30 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800327c:	609a      	str	r2, [r3, #8]
      break;
 800327e:	e039      	b.n	80032f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6818      	ldr	r0, [r3, #0]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	6859      	ldr	r1, [r3, #4]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	461a      	mov	r2, r3
 800328e:	f000 fb1f 	bl	80038d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2150      	movs	r1, #80	; 0x50
 8003298:	4618      	mov	r0, r3
 800329a:	f000 fc2e 	bl	8003afa <TIM_ITRx_SetConfig>
      break;
 800329e:	e029      	b.n	80032f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6818      	ldr	r0, [r3, #0]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	6859      	ldr	r1, [r3, #4]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	461a      	mov	r2, r3
 80032ae:	f000 fb7b 	bl	80039a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2160      	movs	r1, #96	; 0x60
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 fc1e 	bl	8003afa <TIM_ITRx_SetConfig>
      break;
 80032be:	e019      	b.n	80032f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6818      	ldr	r0, [r3, #0]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	6859      	ldr	r1, [r3, #4]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	461a      	mov	r2, r3
 80032ce:	f000 faff 	bl	80038d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2140      	movs	r1, #64	; 0x40
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 fc0e 	bl	8003afa <TIM_ITRx_SetConfig>
      break;
 80032de:	e009      	b.n	80032f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4619      	mov	r1, r3
 80032ea:	4610      	mov	r0, r2
 80032ec:	f000 fc05 	bl	8003afa <TIM_ITRx_SetConfig>
      break;
 80032f0:	e000      	b.n	80032f4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80032f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b0c      	cmp	r3, #12
 8003322:	d831      	bhi.n	8003388 <HAL_TIM_ReadCapturedValue+0x78>
 8003324:	a201      	add	r2, pc, #4	; (adr r2, 800332c <HAL_TIM_ReadCapturedValue+0x1c>)
 8003326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332a:	bf00      	nop
 800332c:	08003361 	.word	0x08003361
 8003330:	08003389 	.word	0x08003389
 8003334:	08003389 	.word	0x08003389
 8003338:	08003389 	.word	0x08003389
 800333c:	0800336b 	.word	0x0800336b
 8003340:	08003389 	.word	0x08003389
 8003344:	08003389 	.word	0x08003389
 8003348:	08003389 	.word	0x08003389
 800334c:	08003375 	.word	0x08003375
 8003350:	08003389 	.word	0x08003389
 8003354:	08003389 	.word	0x08003389
 8003358:	08003389 	.word	0x08003389
 800335c:	0800337f 	.word	0x0800337f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003366:	60fb      	str	r3, [r7, #12]

      break;
 8003368:	e00f      	b.n	800338a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003370:	60fb      	str	r3, [r7, #12]

      break;
 8003372:	e00a      	b.n	800338a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800337a:	60fb      	str	r3, [r7, #12]

      break;
 800337c:	e005      	b.n	800338a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	60fb      	str	r3, [r7, #12]

      break;
 8003386:	e000      	b.n	800338a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003388:	bf00      	nop
  }

  return tmpreg;
 800338a:	68fb      	ldr	r3, [r7, #12]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a34      	ldr	r2, [pc, #208]	; (80034cc <TIM_Base_SetConfig+0xe4>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d00f      	beq.n	8003420 <TIM_Base_SetConfig+0x38>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003406:	d00b      	beq.n	8003420 <TIM_Base_SetConfig+0x38>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a31      	ldr	r2, [pc, #196]	; (80034d0 <TIM_Base_SetConfig+0xe8>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d007      	beq.n	8003420 <TIM_Base_SetConfig+0x38>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a30      	ldr	r2, [pc, #192]	; (80034d4 <TIM_Base_SetConfig+0xec>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d003      	beq.n	8003420 <TIM_Base_SetConfig+0x38>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a2f      	ldr	r2, [pc, #188]	; (80034d8 <TIM_Base_SetConfig+0xf0>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d108      	bne.n	8003432 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	4313      	orrs	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a25      	ldr	r2, [pc, #148]	; (80034cc <TIM_Base_SetConfig+0xe4>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d01b      	beq.n	8003472 <TIM_Base_SetConfig+0x8a>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003440:	d017      	beq.n	8003472 <TIM_Base_SetConfig+0x8a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a22      	ldr	r2, [pc, #136]	; (80034d0 <TIM_Base_SetConfig+0xe8>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d013      	beq.n	8003472 <TIM_Base_SetConfig+0x8a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a21      	ldr	r2, [pc, #132]	; (80034d4 <TIM_Base_SetConfig+0xec>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00f      	beq.n	8003472 <TIM_Base_SetConfig+0x8a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a20      	ldr	r2, [pc, #128]	; (80034d8 <TIM_Base_SetConfig+0xf0>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d00b      	beq.n	8003472 <TIM_Base_SetConfig+0x8a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a1f      	ldr	r2, [pc, #124]	; (80034dc <TIM_Base_SetConfig+0xf4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d007      	beq.n	8003472 <TIM_Base_SetConfig+0x8a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a1e      	ldr	r2, [pc, #120]	; (80034e0 <TIM_Base_SetConfig+0xf8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d003      	beq.n	8003472 <TIM_Base_SetConfig+0x8a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a1d      	ldr	r2, [pc, #116]	; (80034e4 <TIM_Base_SetConfig+0xfc>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d108      	bne.n	8003484 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003478:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	4313      	orrs	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	4313      	orrs	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a08      	ldr	r2, [pc, #32]	; (80034cc <TIM_Base_SetConfig+0xe4>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d103      	bne.n	80034b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	615a      	str	r2, [r3, #20]
}
 80034be:	bf00      	nop
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	40010000 	.word	0x40010000
 80034d0:	40000400 	.word	0x40000400
 80034d4:	40000800 	.word	0x40000800
 80034d8:	40000c00 	.word	0x40000c00
 80034dc:	40014000 	.word	0x40014000
 80034e0:	40014400 	.word	0x40014400
 80034e4:	40014800 	.word	0x40014800

080034e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	f023 0201 	bic.w	r2, r3, #1
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f023 0303 	bic.w	r3, r3, #3
 800351e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	4313      	orrs	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f023 0302 	bic.w	r3, r3, #2
 8003530:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	4313      	orrs	r3, r2
 800353a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a1c      	ldr	r2, [pc, #112]	; (80035b0 <TIM_OC1_SetConfig+0xc8>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d10c      	bne.n	800355e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f023 0308 	bic.w	r3, r3, #8
 800354a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	4313      	orrs	r3, r2
 8003554:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f023 0304 	bic.w	r3, r3, #4
 800355c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a13      	ldr	r2, [pc, #76]	; (80035b0 <TIM_OC1_SetConfig+0xc8>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d111      	bne.n	800358a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800356c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003574:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	4313      	orrs	r3, r2
 800357e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4313      	orrs	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	621a      	str	r2, [r3, #32]
}
 80035a4:	bf00      	nop
 80035a6:	371c      	adds	r7, #28
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	40010000 	.word	0x40010000

080035b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	f023 0210 	bic.w	r2, r3, #16
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	021b      	lsls	r3, r3, #8
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f023 0320 	bic.w	r3, r3, #32
 80035fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	4313      	orrs	r3, r2
 800360a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a1e      	ldr	r2, [pc, #120]	; (8003688 <TIM_OC2_SetConfig+0xd4>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d10d      	bne.n	8003630 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800361a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	4313      	orrs	r3, r2
 8003626:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800362e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a15      	ldr	r2, [pc, #84]	; (8003688 <TIM_OC2_SetConfig+0xd4>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d113      	bne.n	8003660 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800363e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003646:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	4313      	orrs	r3, r2
 800365e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	621a      	str	r2, [r3, #32]
}
 800367a:	bf00      	nop
 800367c:	371c      	adds	r7, #28
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	40010000 	.word	0x40010000

0800368c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800368c:	b480      	push	{r7}
 800368e:	b087      	sub	sp, #28
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f023 0303 	bic.w	r3, r3, #3
 80036c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	021b      	lsls	r3, r3, #8
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	4313      	orrs	r3, r2
 80036e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a1d      	ldr	r2, [pc, #116]	; (800375c <TIM_OC3_SetConfig+0xd0>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d10d      	bne.n	8003706 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	021b      	lsls	r3, r3, #8
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003704:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a14      	ldr	r2, [pc, #80]	; (800375c <TIM_OC3_SetConfig+0xd0>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d113      	bne.n	8003736 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800371c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	4313      	orrs	r3, r2
 8003728:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4313      	orrs	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	621a      	str	r2, [r3, #32]
}
 8003750:	bf00      	nop
 8003752:	371c      	adds	r7, #28
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	40010000 	.word	0x40010000

08003760 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003760:	b480      	push	{r7}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800378e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003796:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	021b      	lsls	r3, r3, #8
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	031b      	lsls	r3, r3, #12
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a10      	ldr	r2, [pc, #64]	; (80037fc <TIM_OC4_SetConfig+0x9c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d109      	bne.n	80037d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	019b      	lsls	r3, r3, #6
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	621a      	str	r2, [r3, #32]
}
 80037ee:	bf00      	nop
 80037f0:	371c      	adds	r7, #28
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	40010000 	.word	0x40010000

08003800 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003800:	b480      	push	{r7}
 8003802:	b087      	sub	sp, #28
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
 800380c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	f023 0201 	bic.w	r2, r3, #1
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4a24      	ldr	r2, [pc, #144]	; (80038bc <TIM_TI1_SetConfig+0xbc>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d013      	beq.n	8003856 <TIM_TI1_SetConfig+0x56>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003834:	d00f      	beq.n	8003856 <TIM_TI1_SetConfig+0x56>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	4a21      	ldr	r2, [pc, #132]	; (80038c0 <TIM_TI1_SetConfig+0xc0>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d00b      	beq.n	8003856 <TIM_TI1_SetConfig+0x56>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	4a20      	ldr	r2, [pc, #128]	; (80038c4 <TIM_TI1_SetConfig+0xc4>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d007      	beq.n	8003856 <TIM_TI1_SetConfig+0x56>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4a1f      	ldr	r2, [pc, #124]	; (80038c8 <TIM_TI1_SetConfig+0xc8>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d003      	beq.n	8003856 <TIM_TI1_SetConfig+0x56>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4a1e      	ldr	r2, [pc, #120]	; (80038cc <TIM_TI1_SetConfig+0xcc>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d101      	bne.n	800385a <TIM_TI1_SetConfig+0x5a>
 8003856:	2301      	movs	r3, #1
 8003858:	e000      	b.n	800385c <TIM_TI1_SetConfig+0x5c>
 800385a:	2300      	movs	r3, #0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d008      	beq.n	8003872 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f023 0303 	bic.w	r3, r3, #3
 8003866:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4313      	orrs	r3, r2
 800386e:	617b      	str	r3, [r7, #20]
 8003870:	e003      	b.n	800387a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f043 0301 	orr.w	r3, r3, #1
 8003878:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003880:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	011b      	lsls	r3, r3, #4
 8003886:	b2db      	uxtb	r3, r3
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	4313      	orrs	r3, r2
 800388c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	f023 030a 	bic.w	r3, r3, #10
 8003894:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	f003 030a 	and.w	r3, r3, #10
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	4313      	orrs	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	621a      	str	r2, [r3, #32]
}
 80038ae:	bf00      	nop
 80038b0:	371c      	adds	r7, #28
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	40010000 	.word	0x40010000
 80038c0:	40000400 	.word	0x40000400
 80038c4:	40000800 	.word	0x40000800
 80038c8:	40000c00 	.word	0x40000c00
 80038cc:	40014000 	.word	0x40014000

080038d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b087      	sub	sp, #28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	f023 0201 	bic.w	r2, r3, #1
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	4313      	orrs	r3, r2
 8003904:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	f023 030a 	bic.w	r3, r3, #10
 800390c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	4313      	orrs	r3, r2
 8003914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	621a      	str	r2, [r3, #32]
}
 8003922:	bf00      	nop
 8003924:	371c      	adds	r7, #28
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800392e:	b480      	push	{r7}
 8003930:	b087      	sub	sp, #28
 8003932:	af00      	add	r7, sp, #0
 8003934:	60f8      	str	r0, [r7, #12]
 8003936:	60b9      	str	r1, [r7, #8]
 8003938:	607a      	str	r2, [r7, #4]
 800393a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	f023 0210 	bic.w	r2, r3, #16
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800395a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	021b      	lsls	r3, r3, #8
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	4313      	orrs	r3, r2
 8003964:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800396c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	031b      	lsls	r3, r3, #12
 8003972:	b29b      	uxth	r3, r3
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	4313      	orrs	r3, r2
 8003978:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003980:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	4313      	orrs	r3, r2
 800398e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	621a      	str	r2, [r3, #32]
}
 800399c:	bf00      	nop
 800399e:	371c      	adds	r7, #28
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	f023 0210 	bic.w	r2, r3, #16
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	031b      	lsls	r3, r3, #12
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	4313      	orrs	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	621a      	str	r2, [r3, #32]
}
 80039fc:	bf00      	nop
 80039fe:	371c      	adds	r7, #28
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f023 0303 	bic.w	r3, r3, #3
 8003a34:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a44:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003a58:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	021b      	lsls	r3, r3, #8
 8003a5e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	621a      	str	r2, [r3, #32]
}
 8003a74:	bf00      	nop
 8003a76:	371c      	adds	r7, #28
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b087      	sub	sp, #28
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
 8003a8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	021b      	lsls	r3, r3, #8
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003abe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	031b      	lsls	r3, r3, #12
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003ad2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	031b      	lsls	r3, r3, #12
 8003ad8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	621a      	str	r2, [r3, #32]
}
 8003aee:	bf00      	nop
 8003af0:	371c      	adds	r7, #28
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b085      	sub	sp, #20
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f043 0307 	orr.w	r3, r3, #7
 8003b1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	609a      	str	r2, [r3, #8]
}
 8003b24:	bf00      	nop
 8003b26:	3714      	adds	r7, #20
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b087      	sub	sp, #28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
 8003b3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	021a      	lsls	r2, r3, #8
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	431a      	orrs	r2, r3
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	609a      	str	r2, [r3, #8]
}
 8003b64:	bf00      	nop
 8003b66:	371c      	adds	r7, #28
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b087      	sub	sp, #28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f003 031f 	and.w	r3, r3, #31
 8003b82:	2201      	movs	r2, #1
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6a1a      	ldr	r2, [r3, #32]
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	43db      	mvns	r3, r3
 8003b92:	401a      	ands	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6a1a      	ldr	r2, [r3, #32]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	f003 031f 	and.w	r3, r3, #31
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	621a      	str	r2, [r3, #32]
}
 8003bae:	bf00      	nop
 8003bb0:	371c      	adds	r7, #28
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
	...

08003bbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e050      	b.n	8003c76 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a1c      	ldr	r2, [pc, #112]	; (8003c84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d018      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c20:	d013      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a18      	ldr	r2, [pc, #96]	; (8003c88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d00e      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a16      	ldr	r2, [pc, #88]	; (8003c8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d009      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a15      	ldr	r2, [pc, #84]	; (8003c90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d004      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a13      	ldr	r2, [pc, #76]	; (8003c94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d10c      	bne.n	8003c64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	40010000 	.word	0x40010000
 8003c88:	40000400 	.word	0x40000400
 8003c8c:	40000800 	.word	0x40000800
 8003c90:	40000c00 	.word	0x40000c00
 8003c94:	40014000 	.word	0x40014000

08003c98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d101      	bne.n	8003cb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	e03d      	b.n	8003d30 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e03f      	b.n	8003df6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d106      	bne.n	8003d90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7fd fd8a 	bl	80018a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2224      	movs	r2, #36	; 0x24
 8003d94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003da6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f90b 	bl	8003fc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	691a      	ldr	r2, [r3, #16]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	695a      	ldr	r2, [r3, #20]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ddc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2220      	movs	r2, #32
 8003de8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2220      	movs	r2, #32
 8003df0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b088      	sub	sp, #32
 8003e02:	af02      	add	r7, sp, #8
 8003e04:	60f8      	str	r0, [r7, #12]
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	603b      	str	r3, [r7, #0]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b20      	cmp	r3, #32
 8003e1c:	f040 8083 	bne.w	8003f26 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <HAL_UART_Transmit+0x2e>
 8003e26:	88fb      	ldrh	r3, [r7, #6]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e07b      	b.n	8003f28 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d101      	bne.n	8003e3e <HAL_UART_Transmit+0x40>
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	e074      	b.n	8003f28 <HAL_UART_Transmit+0x12a>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2221      	movs	r2, #33	; 0x21
 8003e50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003e54:	f7fd feb4 	bl	8001bc0 <HAL_GetTick>
 8003e58:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	88fa      	ldrh	r2, [r7, #6]
 8003e5e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	88fa      	ldrh	r2, [r7, #6]
 8003e64:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003e6e:	e042      	b.n	8003ef6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e86:	d122      	bne.n	8003ece <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	2180      	movs	r1, #128	; 0x80
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 f84c 	bl	8003f30 <UART_WaitOnFlagUntilTimeout>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e042      	b.n	8003f28 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	881b      	ldrh	r3, [r3, #0]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003eb4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d103      	bne.n	8003ec6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	3302      	adds	r3, #2
 8003ec2:	60bb      	str	r3, [r7, #8]
 8003ec4:	e017      	b.n	8003ef6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	60bb      	str	r3, [r7, #8]
 8003ecc:	e013      	b.n	8003ef6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	2180      	movs	r1, #128	; 0x80
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f000 f829 	bl	8003f30 <UART_WaitOnFlagUntilTimeout>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e01f      	b.n	8003f28 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	1c5a      	adds	r2, r3, #1
 8003eec:	60ba      	str	r2, [r7, #8]
 8003eee:	781a      	ldrb	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1b7      	bne.n	8003e70 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	2200      	movs	r2, #0
 8003f08:	2140      	movs	r1, #64	; 0x40
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f000 f810 	bl	8003f30 <UART_WaitOnFlagUntilTimeout>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e006      	b.n	8003f28 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	e000      	b.n	8003f28 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003f26:	2302      	movs	r3, #2
  }
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3718      	adds	r7, #24
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	603b      	str	r3, [r7, #0]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f40:	e02c      	b.n	8003f9c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f48:	d028      	beq.n	8003f9c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d007      	beq.n	8003f60 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f50:	f7fd fe36 	bl	8001bc0 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d21d      	bcs.n	8003f9c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f6e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695a      	ldr	r2, [r3, #20]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0201 	bic.w	r2, r2, #1
 8003f7e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2220      	movs	r2, #32
 8003f84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e00f      	b.n	8003fbc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	bf0c      	ite	eq
 8003fac:	2301      	moveq	r3, #1
 8003fae:	2300      	movne	r3, #0
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	79fb      	ldrb	r3, [r7, #7]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d0c3      	beq.n	8003f42 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fc8:	b085      	sub	sp, #20
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68da      	ldr	r2, [r3, #12]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004006:	f023 030c 	bic.w	r3, r3, #12
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6812      	ldr	r2, [r2, #0]
 800400e:	68f9      	ldr	r1, [r7, #12]
 8004010:	430b      	orrs	r3, r1
 8004012:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699a      	ldr	r2, [r3, #24]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004032:	f040 818b 	bne.w	800434c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4ac1      	ldr	r2, [pc, #772]	; (8004340 <UART_SetConfig+0x37c>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d005      	beq.n	800404c <UART_SetConfig+0x88>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4abf      	ldr	r2, [pc, #764]	; (8004344 <UART_SetConfig+0x380>)
 8004046:	4293      	cmp	r3, r2
 8004048:	f040 80bd 	bne.w	80041c6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800404c:	f7fe fcfa 	bl	8002a44 <HAL_RCC_GetPCLK2Freq>
 8004050:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	461d      	mov	r5, r3
 8004056:	f04f 0600 	mov.w	r6, #0
 800405a:	46a8      	mov	r8, r5
 800405c:	46b1      	mov	r9, r6
 800405e:	eb18 0308 	adds.w	r3, r8, r8
 8004062:	eb49 0409 	adc.w	r4, r9, r9
 8004066:	4698      	mov	r8, r3
 8004068:	46a1      	mov	r9, r4
 800406a:	eb18 0805 	adds.w	r8, r8, r5
 800406e:	eb49 0906 	adc.w	r9, r9, r6
 8004072:	f04f 0100 	mov.w	r1, #0
 8004076:	f04f 0200 	mov.w	r2, #0
 800407a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800407e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004082:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004086:	4688      	mov	r8, r1
 8004088:	4691      	mov	r9, r2
 800408a:	eb18 0005 	adds.w	r0, r8, r5
 800408e:	eb49 0106 	adc.w	r1, r9, r6
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	461d      	mov	r5, r3
 8004098:	f04f 0600 	mov.w	r6, #0
 800409c:	196b      	adds	r3, r5, r5
 800409e:	eb46 0406 	adc.w	r4, r6, r6
 80040a2:	461a      	mov	r2, r3
 80040a4:	4623      	mov	r3, r4
 80040a6:	f7fc fce9 	bl	8000a7c <__aeabi_uldivmod>
 80040aa:	4603      	mov	r3, r0
 80040ac:	460c      	mov	r4, r1
 80040ae:	461a      	mov	r2, r3
 80040b0:	4ba5      	ldr	r3, [pc, #660]	; (8004348 <UART_SetConfig+0x384>)
 80040b2:	fba3 2302 	umull	r2, r3, r3, r2
 80040b6:	095b      	lsrs	r3, r3, #5
 80040b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	461d      	mov	r5, r3
 80040c0:	f04f 0600 	mov.w	r6, #0
 80040c4:	46a9      	mov	r9, r5
 80040c6:	46b2      	mov	sl, r6
 80040c8:	eb19 0309 	adds.w	r3, r9, r9
 80040cc:	eb4a 040a 	adc.w	r4, sl, sl
 80040d0:	4699      	mov	r9, r3
 80040d2:	46a2      	mov	sl, r4
 80040d4:	eb19 0905 	adds.w	r9, r9, r5
 80040d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80040dc:	f04f 0100 	mov.w	r1, #0
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040f0:	4689      	mov	r9, r1
 80040f2:	4692      	mov	sl, r2
 80040f4:	eb19 0005 	adds.w	r0, r9, r5
 80040f8:	eb4a 0106 	adc.w	r1, sl, r6
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	461d      	mov	r5, r3
 8004102:	f04f 0600 	mov.w	r6, #0
 8004106:	196b      	adds	r3, r5, r5
 8004108:	eb46 0406 	adc.w	r4, r6, r6
 800410c:	461a      	mov	r2, r3
 800410e:	4623      	mov	r3, r4
 8004110:	f7fc fcb4 	bl	8000a7c <__aeabi_uldivmod>
 8004114:	4603      	mov	r3, r0
 8004116:	460c      	mov	r4, r1
 8004118:	461a      	mov	r2, r3
 800411a:	4b8b      	ldr	r3, [pc, #556]	; (8004348 <UART_SetConfig+0x384>)
 800411c:	fba3 1302 	umull	r1, r3, r3, r2
 8004120:	095b      	lsrs	r3, r3, #5
 8004122:	2164      	movs	r1, #100	; 0x64
 8004124:	fb01 f303 	mul.w	r3, r1, r3
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	3332      	adds	r3, #50	; 0x32
 800412e:	4a86      	ldr	r2, [pc, #536]	; (8004348 <UART_SetConfig+0x384>)
 8004130:	fba2 2303 	umull	r2, r3, r2, r3
 8004134:	095b      	lsrs	r3, r3, #5
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800413c:	4498      	add	r8, r3
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	461d      	mov	r5, r3
 8004142:	f04f 0600 	mov.w	r6, #0
 8004146:	46a9      	mov	r9, r5
 8004148:	46b2      	mov	sl, r6
 800414a:	eb19 0309 	adds.w	r3, r9, r9
 800414e:	eb4a 040a 	adc.w	r4, sl, sl
 8004152:	4699      	mov	r9, r3
 8004154:	46a2      	mov	sl, r4
 8004156:	eb19 0905 	adds.w	r9, r9, r5
 800415a:	eb4a 0a06 	adc.w	sl, sl, r6
 800415e:	f04f 0100 	mov.w	r1, #0
 8004162:	f04f 0200 	mov.w	r2, #0
 8004166:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800416a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800416e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004172:	4689      	mov	r9, r1
 8004174:	4692      	mov	sl, r2
 8004176:	eb19 0005 	adds.w	r0, r9, r5
 800417a:	eb4a 0106 	adc.w	r1, sl, r6
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	461d      	mov	r5, r3
 8004184:	f04f 0600 	mov.w	r6, #0
 8004188:	196b      	adds	r3, r5, r5
 800418a:	eb46 0406 	adc.w	r4, r6, r6
 800418e:	461a      	mov	r2, r3
 8004190:	4623      	mov	r3, r4
 8004192:	f7fc fc73 	bl	8000a7c <__aeabi_uldivmod>
 8004196:	4603      	mov	r3, r0
 8004198:	460c      	mov	r4, r1
 800419a:	461a      	mov	r2, r3
 800419c:	4b6a      	ldr	r3, [pc, #424]	; (8004348 <UART_SetConfig+0x384>)
 800419e:	fba3 1302 	umull	r1, r3, r3, r2
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	2164      	movs	r1, #100	; 0x64
 80041a6:	fb01 f303 	mul.w	r3, r1, r3
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	3332      	adds	r3, #50	; 0x32
 80041b0:	4a65      	ldr	r2, [pc, #404]	; (8004348 <UART_SetConfig+0x384>)
 80041b2:	fba2 2303 	umull	r2, r3, r2, r3
 80041b6:	095b      	lsrs	r3, r3, #5
 80041b8:	f003 0207 	and.w	r2, r3, #7
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4442      	add	r2, r8
 80041c2:	609a      	str	r2, [r3, #8]
 80041c4:	e26f      	b.n	80046a6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041c6:	f7fe fc29 	bl	8002a1c <HAL_RCC_GetPCLK1Freq>
 80041ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	461d      	mov	r5, r3
 80041d0:	f04f 0600 	mov.w	r6, #0
 80041d4:	46a8      	mov	r8, r5
 80041d6:	46b1      	mov	r9, r6
 80041d8:	eb18 0308 	adds.w	r3, r8, r8
 80041dc:	eb49 0409 	adc.w	r4, r9, r9
 80041e0:	4698      	mov	r8, r3
 80041e2:	46a1      	mov	r9, r4
 80041e4:	eb18 0805 	adds.w	r8, r8, r5
 80041e8:	eb49 0906 	adc.w	r9, r9, r6
 80041ec:	f04f 0100 	mov.w	r1, #0
 80041f0:	f04f 0200 	mov.w	r2, #0
 80041f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80041f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80041fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004200:	4688      	mov	r8, r1
 8004202:	4691      	mov	r9, r2
 8004204:	eb18 0005 	adds.w	r0, r8, r5
 8004208:	eb49 0106 	adc.w	r1, r9, r6
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	461d      	mov	r5, r3
 8004212:	f04f 0600 	mov.w	r6, #0
 8004216:	196b      	adds	r3, r5, r5
 8004218:	eb46 0406 	adc.w	r4, r6, r6
 800421c:	461a      	mov	r2, r3
 800421e:	4623      	mov	r3, r4
 8004220:	f7fc fc2c 	bl	8000a7c <__aeabi_uldivmod>
 8004224:	4603      	mov	r3, r0
 8004226:	460c      	mov	r4, r1
 8004228:	461a      	mov	r2, r3
 800422a:	4b47      	ldr	r3, [pc, #284]	; (8004348 <UART_SetConfig+0x384>)
 800422c:	fba3 2302 	umull	r2, r3, r3, r2
 8004230:	095b      	lsrs	r3, r3, #5
 8004232:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	461d      	mov	r5, r3
 800423a:	f04f 0600 	mov.w	r6, #0
 800423e:	46a9      	mov	r9, r5
 8004240:	46b2      	mov	sl, r6
 8004242:	eb19 0309 	adds.w	r3, r9, r9
 8004246:	eb4a 040a 	adc.w	r4, sl, sl
 800424a:	4699      	mov	r9, r3
 800424c:	46a2      	mov	sl, r4
 800424e:	eb19 0905 	adds.w	r9, r9, r5
 8004252:	eb4a 0a06 	adc.w	sl, sl, r6
 8004256:	f04f 0100 	mov.w	r1, #0
 800425a:	f04f 0200 	mov.w	r2, #0
 800425e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004262:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004266:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800426a:	4689      	mov	r9, r1
 800426c:	4692      	mov	sl, r2
 800426e:	eb19 0005 	adds.w	r0, r9, r5
 8004272:	eb4a 0106 	adc.w	r1, sl, r6
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	461d      	mov	r5, r3
 800427c:	f04f 0600 	mov.w	r6, #0
 8004280:	196b      	adds	r3, r5, r5
 8004282:	eb46 0406 	adc.w	r4, r6, r6
 8004286:	461a      	mov	r2, r3
 8004288:	4623      	mov	r3, r4
 800428a:	f7fc fbf7 	bl	8000a7c <__aeabi_uldivmod>
 800428e:	4603      	mov	r3, r0
 8004290:	460c      	mov	r4, r1
 8004292:	461a      	mov	r2, r3
 8004294:	4b2c      	ldr	r3, [pc, #176]	; (8004348 <UART_SetConfig+0x384>)
 8004296:	fba3 1302 	umull	r1, r3, r3, r2
 800429a:	095b      	lsrs	r3, r3, #5
 800429c:	2164      	movs	r1, #100	; 0x64
 800429e:	fb01 f303 	mul.w	r3, r1, r3
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	3332      	adds	r3, #50	; 0x32
 80042a8:	4a27      	ldr	r2, [pc, #156]	; (8004348 <UART_SetConfig+0x384>)
 80042aa:	fba2 2303 	umull	r2, r3, r2, r3
 80042ae:	095b      	lsrs	r3, r3, #5
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042b6:	4498      	add	r8, r3
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	461d      	mov	r5, r3
 80042bc:	f04f 0600 	mov.w	r6, #0
 80042c0:	46a9      	mov	r9, r5
 80042c2:	46b2      	mov	sl, r6
 80042c4:	eb19 0309 	adds.w	r3, r9, r9
 80042c8:	eb4a 040a 	adc.w	r4, sl, sl
 80042cc:	4699      	mov	r9, r3
 80042ce:	46a2      	mov	sl, r4
 80042d0:	eb19 0905 	adds.w	r9, r9, r5
 80042d4:	eb4a 0a06 	adc.w	sl, sl, r6
 80042d8:	f04f 0100 	mov.w	r1, #0
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042ec:	4689      	mov	r9, r1
 80042ee:	4692      	mov	sl, r2
 80042f0:	eb19 0005 	adds.w	r0, r9, r5
 80042f4:	eb4a 0106 	adc.w	r1, sl, r6
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	461d      	mov	r5, r3
 80042fe:	f04f 0600 	mov.w	r6, #0
 8004302:	196b      	adds	r3, r5, r5
 8004304:	eb46 0406 	adc.w	r4, r6, r6
 8004308:	461a      	mov	r2, r3
 800430a:	4623      	mov	r3, r4
 800430c:	f7fc fbb6 	bl	8000a7c <__aeabi_uldivmod>
 8004310:	4603      	mov	r3, r0
 8004312:	460c      	mov	r4, r1
 8004314:	461a      	mov	r2, r3
 8004316:	4b0c      	ldr	r3, [pc, #48]	; (8004348 <UART_SetConfig+0x384>)
 8004318:	fba3 1302 	umull	r1, r3, r3, r2
 800431c:	095b      	lsrs	r3, r3, #5
 800431e:	2164      	movs	r1, #100	; 0x64
 8004320:	fb01 f303 	mul.w	r3, r1, r3
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	3332      	adds	r3, #50	; 0x32
 800432a:	4a07      	ldr	r2, [pc, #28]	; (8004348 <UART_SetConfig+0x384>)
 800432c:	fba2 2303 	umull	r2, r3, r2, r3
 8004330:	095b      	lsrs	r3, r3, #5
 8004332:	f003 0207 	and.w	r2, r3, #7
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4442      	add	r2, r8
 800433c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800433e:	e1b2      	b.n	80046a6 <UART_SetConfig+0x6e2>
 8004340:	40011000 	.word	0x40011000
 8004344:	40011400 	.word	0x40011400
 8004348:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4ad7      	ldr	r2, [pc, #860]	; (80046b0 <UART_SetConfig+0x6ec>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d005      	beq.n	8004362 <UART_SetConfig+0x39e>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4ad6      	ldr	r2, [pc, #856]	; (80046b4 <UART_SetConfig+0x6f0>)
 800435c:	4293      	cmp	r3, r2
 800435e:	f040 80d1 	bne.w	8004504 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004362:	f7fe fb6f 	bl	8002a44 <HAL_RCC_GetPCLK2Freq>
 8004366:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	469a      	mov	sl, r3
 800436c:	f04f 0b00 	mov.w	fp, #0
 8004370:	46d0      	mov	r8, sl
 8004372:	46d9      	mov	r9, fp
 8004374:	eb18 0308 	adds.w	r3, r8, r8
 8004378:	eb49 0409 	adc.w	r4, r9, r9
 800437c:	4698      	mov	r8, r3
 800437e:	46a1      	mov	r9, r4
 8004380:	eb18 080a 	adds.w	r8, r8, sl
 8004384:	eb49 090b 	adc.w	r9, r9, fp
 8004388:	f04f 0100 	mov.w	r1, #0
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004394:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004398:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800439c:	4688      	mov	r8, r1
 800439e:	4691      	mov	r9, r2
 80043a0:	eb1a 0508 	adds.w	r5, sl, r8
 80043a4:	eb4b 0609 	adc.w	r6, fp, r9
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	4619      	mov	r1, r3
 80043ae:	f04f 0200 	mov.w	r2, #0
 80043b2:	f04f 0300 	mov.w	r3, #0
 80043b6:	f04f 0400 	mov.w	r4, #0
 80043ba:	0094      	lsls	r4, r2, #2
 80043bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043c0:	008b      	lsls	r3, r1, #2
 80043c2:	461a      	mov	r2, r3
 80043c4:	4623      	mov	r3, r4
 80043c6:	4628      	mov	r0, r5
 80043c8:	4631      	mov	r1, r6
 80043ca:	f7fc fb57 	bl	8000a7c <__aeabi_uldivmod>
 80043ce:	4603      	mov	r3, r0
 80043d0:	460c      	mov	r4, r1
 80043d2:	461a      	mov	r2, r3
 80043d4:	4bb8      	ldr	r3, [pc, #736]	; (80046b8 <UART_SetConfig+0x6f4>)
 80043d6:	fba3 2302 	umull	r2, r3, r3, r2
 80043da:	095b      	lsrs	r3, r3, #5
 80043dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	469b      	mov	fp, r3
 80043e4:	f04f 0c00 	mov.w	ip, #0
 80043e8:	46d9      	mov	r9, fp
 80043ea:	46e2      	mov	sl, ip
 80043ec:	eb19 0309 	adds.w	r3, r9, r9
 80043f0:	eb4a 040a 	adc.w	r4, sl, sl
 80043f4:	4699      	mov	r9, r3
 80043f6:	46a2      	mov	sl, r4
 80043f8:	eb19 090b 	adds.w	r9, r9, fp
 80043fc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004400:	f04f 0100 	mov.w	r1, #0
 8004404:	f04f 0200 	mov.w	r2, #0
 8004408:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800440c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004410:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004414:	4689      	mov	r9, r1
 8004416:	4692      	mov	sl, r2
 8004418:	eb1b 0509 	adds.w	r5, fp, r9
 800441c:	eb4c 060a 	adc.w	r6, ip, sl
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	4619      	mov	r1, r3
 8004426:	f04f 0200 	mov.w	r2, #0
 800442a:	f04f 0300 	mov.w	r3, #0
 800442e:	f04f 0400 	mov.w	r4, #0
 8004432:	0094      	lsls	r4, r2, #2
 8004434:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004438:	008b      	lsls	r3, r1, #2
 800443a:	461a      	mov	r2, r3
 800443c:	4623      	mov	r3, r4
 800443e:	4628      	mov	r0, r5
 8004440:	4631      	mov	r1, r6
 8004442:	f7fc fb1b 	bl	8000a7c <__aeabi_uldivmod>
 8004446:	4603      	mov	r3, r0
 8004448:	460c      	mov	r4, r1
 800444a:	461a      	mov	r2, r3
 800444c:	4b9a      	ldr	r3, [pc, #616]	; (80046b8 <UART_SetConfig+0x6f4>)
 800444e:	fba3 1302 	umull	r1, r3, r3, r2
 8004452:	095b      	lsrs	r3, r3, #5
 8004454:	2164      	movs	r1, #100	; 0x64
 8004456:	fb01 f303 	mul.w	r3, r1, r3
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	011b      	lsls	r3, r3, #4
 800445e:	3332      	adds	r3, #50	; 0x32
 8004460:	4a95      	ldr	r2, [pc, #596]	; (80046b8 <UART_SetConfig+0x6f4>)
 8004462:	fba2 2303 	umull	r2, r3, r2, r3
 8004466:	095b      	lsrs	r3, r3, #5
 8004468:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800446c:	4498      	add	r8, r3
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	469b      	mov	fp, r3
 8004472:	f04f 0c00 	mov.w	ip, #0
 8004476:	46d9      	mov	r9, fp
 8004478:	46e2      	mov	sl, ip
 800447a:	eb19 0309 	adds.w	r3, r9, r9
 800447e:	eb4a 040a 	adc.w	r4, sl, sl
 8004482:	4699      	mov	r9, r3
 8004484:	46a2      	mov	sl, r4
 8004486:	eb19 090b 	adds.w	r9, r9, fp
 800448a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800448e:	f04f 0100 	mov.w	r1, #0
 8004492:	f04f 0200 	mov.w	r2, #0
 8004496:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800449a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800449e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044a2:	4689      	mov	r9, r1
 80044a4:	4692      	mov	sl, r2
 80044a6:	eb1b 0509 	adds.w	r5, fp, r9
 80044aa:	eb4c 060a 	adc.w	r6, ip, sl
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	4619      	mov	r1, r3
 80044b4:	f04f 0200 	mov.w	r2, #0
 80044b8:	f04f 0300 	mov.w	r3, #0
 80044bc:	f04f 0400 	mov.w	r4, #0
 80044c0:	0094      	lsls	r4, r2, #2
 80044c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044c6:	008b      	lsls	r3, r1, #2
 80044c8:	461a      	mov	r2, r3
 80044ca:	4623      	mov	r3, r4
 80044cc:	4628      	mov	r0, r5
 80044ce:	4631      	mov	r1, r6
 80044d0:	f7fc fad4 	bl	8000a7c <__aeabi_uldivmod>
 80044d4:	4603      	mov	r3, r0
 80044d6:	460c      	mov	r4, r1
 80044d8:	461a      	mov	r2, r3
 80044da:	4b77      	ldr	r3, [pc, #476]	; (80046b8 <UART_SetConfig+0x6f4>)
 80044dc:	fba3 1302 	umull	r1, r3, r3, r2
 80044e0:	095b      	lsrs	r3, r3, #5
 80044e2:	2164      	movs	r1, #100	; 0x64
 80044e4:	fb01 f303 	mul.w	r3, r1, r3
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	3332      	adds	r3, #50	; 0x32
 80044ee:	4a72      	ldr	r2, [pc, #456]	; (80046b8 <UART_SetConfig+0x6f4>)
 80044f0:	fba2 2303 	umull	r2, r3, r2, r3
 80044f4:	095b      	lsrs	r3, r3, #5
 80044f6:	f003 020f 	and.w	r2, r3, #15
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4442      	add	r2, r8
 8004500:	609a      	str	r2, [r3, #8]
 8004502:	e0d0      	b.n	80046a6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004504:	f7fe fa8a 	bl	8002a1c <HAL_RCC_GetPCLK1Freq>
 8004508:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	469a      	mov	sl, r3
 800450e:	f04f 0b00 	mov.w	fp, #0
 8004512:	46d0      	mov	r8, sl
 8004514:	46d9      	mov	r9, fp
 8004516:	eb18 0308 	adds.w	r3, r8, r8
 800451a:	eb49 0409 	adc.w	r4, r9, r9
 800451e:	4698      	mov	r8, r3
 8004520:	46a1      	mov	r9, r4
 8004522:	eb18 080a 	adds.w	r8, r8, sl
 8004526:	eb49 090b 	adc.w	r9, r9, fp
 800452a:	f04f 0100 	mov.w	r1, #0
 800452e:	f04f 0200 	mov.w	r2, #0
 8004532:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004536:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800453a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800453e:	4688      	mov	r8, r1
 8004540:	4691      	mov	r9, r2
 8004542:	eb1a 0508 	adds.w	r5, sl, r8
 8004546:	eb4b 0609 	adc.w	r6, fp, r9
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	4619      	mov	r1, r3
 8004550:	f04f 0200 	mov.w	r2, #0
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	f04f 0400 	mov.w	r4, #0
 800455c:	0094      	lsls	r4, r2, #2
 800455e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004562:	008b      	lsls	r3, r1, #2
 8004564:	461a      	mov	r2, r3
 8004566:	4623      	mov	r3, r4
 8004568:	4628      	mov	r0, r5
 800456a:	4631      	mov	r1, r6
 800456c:	f7fc fa86 	bl	8000a7c <__aeabi_uldivmod>
 8004570:	4603      	mov	r3, r0
 8004572:	460c      	mov	r4, r1
 8004574:	461a      	mov	r2, r3
 8004576:	4b50      	ldr	r3, [pc, #320]	; (80046b8 <UART_SetConfig+0x6f4>)
 8004578:	fba3 2302 	umull	r2, r3, r3, r2
 800457c:	095b      	lsrs	r3, r3, #5
 800457e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	469b      	mov	fp, r3
 8004586:	f04f 0c00 	mov.w	ip, #0
 800458a:	46d9      	mov	r9, fp
 800458c:	46e2      	mov	sl, ip
 800458e:	eb19 0309 	adds.w	r3, r9, r9
 8004592:	eb4a 040a 	adc.w	r4, sl, sl
 8004596:	4699      	mov	r9, r3
 8004598:	46a2      	mov	sl, r4
 800459a:	eb19 090b 	adds.w	r9, r9, fp
 800459e:	eb4a 0a0c 	adc.w	sl, sl, ip
 80045a2:	f04f 0100 	mov.w	r1, #0
 80045a6:	f04f 0200 	mov.w	r2, #0
 80045aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80045b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045b6:	4689      	mov	r9, r1
 80045b8:	4692      	mov	sl, r2
 80045ba:	eb1b 0509 	adds.w	r5, fp, r9
 80045be:	eb4c 060a 	adc.w	r6, ip, sl
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	4619      	mov	r1, r3
 80045c8:	f04f 0200 	mov.w	r2, #0
 80045cc:	f04f 0300 	mov.w	r3, #0
 80045d0:	f04f 0400 	mov.w	r4, #0
 80045d4:	0094      	lsls	r4, r2, #2
 80045d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045da:	008b      	lsls	r3, r1, #2
 80045dc:	461a      	mov	r2, r3
 80045de:	4623      	mov	r3, r4
 80045e0:	4628      	mov	r0, r5
 80045e2:	4631      	mov	r1, r6
 80045e4:	f7fc fa4a 	bl	8000a7c <__aeabi_uldivmod>
 80045e8:	4603      	mov	r3, r0
 80045ea:	460c      	mov	r4, r1
 80045ec:	461a      	mov	r2, r3
 80045ee:	4b32      	ldr	r3, [pc, #200]	; (80046b8 <UART_SetConfig+0x6f4>)
 80045f0:	fba3 1302 	umull	r1, r3, r3, r2
 80045f4:	095b      	lsrs	r3, r3, #5
 80045f6:	2164      	movs	r1, #100	; 0x64
 80045f8:	fb01 f303 	mul.w	r3, r1, r3
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	3332      	adds	r3, #50	; 0x32
 8004602:	4a2d      	ldr	r2, [pc, #180]	; (80046b8 <UART_SetConfig+0x6f4>)
 8004604:	fba2 2303 	umull	r2, r3, r2, r3
 8004608:	095b      	lsrs	r3, r3, #5
 800460a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800460e:	4498      	add	r8, r3
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	469b      	mov	fp, r3
 8004614:	f04f 0c00 	mov.w	ip, #0
 8004618:	46d9      	mov	r9, fp
 800461a:	46e2      	mov	sl, ip
 800461c:	eb19 0309 	adds.w	r3, r9, r9
 8004620:	eb4a 040a 	adc.w	r4, sl, sl
 8004624:	4699      	mov	r9, r3
 8004626:	46a2      	mov	sl, r4
 8004628:	eb19 090b 	adds.w	r9, r9, fp
 800462c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004630:	f04f 0100 	mov.w	r1, #0
 8004634:	f04f 0200 	mov.w	r2, #0
 8004638:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800463c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004640:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004644:	4689      	mov	r9, r1
 8004646:	4692      	mov	sl, r2
 8004648:	eb1b 0509 	adds.w	r5, fp, r9
 800464c:	eb4c 060a 	adc.w	r6, ip, sl
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	4619      	mov	r1, r3
 8004656:	f04f 0200 	mov.w	r2, #0
 800465a:	f04f 0300 	mov.w	r3, #0
 800465e:	f04f 0400 	mov.w	r4, #0
 8004662:	0094      	lsls	r4, r2, #2
 8004664:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004668:	008b      	lsls	r3, r1, #2
 800466a:	461a      	mov	r2, r3
 800466c:	4623      	mov	r3, r4
 800466e:	4628      	mov	r0, r5
 8004670:	4631      	mov	r1, r6
 8004672:	f7fc fa03 	bl	8000a7c <__aeabi_uldivmod>
 8004676:	4603      	mov	r3, r0
 8004678:	460c      	mov	r4, r1
 800467a:	461a      	mov	r2, r3
 800467c:	4b0e      	ldr	r3, [pc, #56]	; (80046b8 <UART_SetConfig+0x6f4>)
 800467e:	fba3 1302 	umull	r1, r3, r3, r2
 8004682:	095b      	lsrs	r3, r3, #5
 8004684:	2164      	movs	r1, #100	; 0x64
 8004686:	fb01 f303 	mul.w	r3, r1, r3
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	3332      	adds	r3, #50	; 0x32
 8004690:	4a09      	ldr	r2, [pc, #36]	; (80046b8 <UART_SetConfig+0x6f4>)
 8004692:	fba2 2303 	umull	r2, r3, r2, r3
 8004696:	095b      	lsrs	r3, r3, #5
 8004698:	f003 020f 	and.w	r2, r3, #15
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4442      	add	r2, r8
 80046a2:	609a      	str	r2, [r3, #8]
}
 80046a4:	e7ff      	b.n	80046a6 <UART_SetConfig+0x6e2>
 80046a6:	bf00      	nop
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046b0:	40011000 	.word	0x40011000
 80046b4:	40011400 	.word	0x40011400
 80046b8:	51eb851f 	.word	0x51eb851f

080046bc <__errno>:
 80046bc:	4b01      	ldr	r3, [pc, #4]	; (80046c4 <__errno+0x8>)
 80046be:	6818      	ldr	r0, [r3, #0]
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	2000000c 	.word	0x2000000c

080046c8 <__libc_init_array>:
 80046c8:	b570      	push	{r4, r5, r6, lr}
 80046ca:	4e0d      	ldr	r6, [pc, #52]	; (8004700 <__libc_init_array+0x38>)
 80046cc:	4c0d      	ldr	r4, [pc, #52]	; (8004704 <__libc_init_array+0x3c>)
 80046ce:	1ba4      	subs	r4, r4, r6
 80046d0:	10a4      	asrs	r4, r4, #2
 80046d2:	2500      	movs	r5, #0
 80046d4:	42a5      	cmp	r5, r4
 80046d6:	d109      	bne.n	80046ec <__libc_init_array+0x24>
 80046d8:	4e0b      	ldr	r6, [pc, #44]	; (8004708 <__libc_init_array+0x40>)
 80046da:	4c0c      	ldr	r4, [pc, #48]	; (800470c <__libc_init_array+0x44>)
 80046dc:	f000 fc26 	bl	8004f2c <_init>
 80046e0:	1ba4      	subs	r4, r4, r6
 80046e2:	10a4      	asrs	r4, r4, #2
 80046e4:	2500      	movs	r5, #0
 80046e6:	42a5      	cmp	r5, r4
 80046e8:	d105      	bne.n	80046f6 <__libc_init_array+0x2e>
 80046ea:	bd70      	pop	{r4, r5, r6, pc}
 80046ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046f0:	4798      	blx	r3
 80046f2:	3501      	adds	r5, #1
 80046f4:	e7ee      	b.n	80046d4 <__libc_init_array+0xc>
 80046f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046fa:	4798      	blx	r3
 80046fc:	3501      	adds	r5, #1
 80046fe:	e7f2      	b.n	80046e6 <__libc_init_array+0x1e>
 8004700:	08004fa4 	.word	0x08004fa4
 8004704:	08004fa4 	.word	0x08004fa4
 8004708:	08004fa4 	.word	0x08004fa4
 800470c:	08004fa8 	.word	0x08004fa8

08004710 <memset>:
 8004710:	4402      	add	r2, r0
 8004712:	4603      	mov	r3, r0
 8004714:	4293      	cmp	r3, r2
 8004716:	d100      	bne.n	800471a <memset+0xa>
 8004718:	4770      	bx	lr
 800471a:	f803 1b01 	strb.w	r1, [r3], #1
 800471e:	e7f9      	b.n	8004714 <memset+0x4>

08004720 <siprintf>:
 8004720:	b40e      	push	{r1, r2, r3}
 8004722:	b500      	push	{lr}
 8004724:	b09c      	sub	sp, #112	; 0x70
 8004726:	ab1d      	add	r3, sp, #116	; 0x74
 8004728:	9002      	str	r0, [sp, #8]
 800472a:	9006      	str	r0, [sp, #24]
 800472c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004730:	4809      	ldr	r0, [pc, #36]	; (8004758 <siprintf+0x38>)
 8004732:	9107      	str	r1, [sp, #28]
 8004734:	9104      	str	r1, [sp, #16]
 8004736:	4909      	ldr	r1, [pc, #36]	; (800475c <siprintf+0x3c>)
 8004738:	f853 2b04 	ldr.w	r2, [r3], #4
 800473c:	9105      	str	r1, [sp, #20]
 800473e:	6800      	ldr	r0, [r0, #0]
 8004740:	9301      	str	r3, [sp, #4]
 8004742:	a902      	add	r1, sp, #8
 8004744:	f000 f866 	bl	8004814 <_svfiprintf_r>
 8004748:	9b02      	ldr	r3, [sp, #8]
 800474a:	2200      	movs	r2, #0
 800474c:	701a      	strb	r2, [r3, #0]
 800474e:	b01c      	add	sp, #112	; 0x70
 8004750:	f85d eb04 	ldr.w	lr, [sp], #4
 8004754:	b003      	add	sp, #12
 8004756:	4770      	bx	lr
 8004758:	2000000c 	.word	0x2000000c
 800475c:	ffff0208 	.word	0xffff0208

08004760 <__ssputs_r>:
 8004760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004764:	688e      	ldr	r6, [r1, #8]
 8004766:	429e      	cmp	r6, r3
 8004768:	4682      	mov	sl, r0
 800476a:	460c      	mov	r4, r1
 800476c:	4690      	mov	r8, r2
 800476e:	4699      	mov	r9, r3
 8004770:	d837      	bhi.n	80047e2 <__ssputs_r+0x82>
 8004772:	898a      	ldrh	r2, [r1, #12]
 8004774:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004778:	d031      	beq.n	80047de <__ssputs_r+0x7e>
 800477a:	6825      	ldr	r5, [r4, #0]
 800477c:	6909      	ldr	r1, [r1, #16]
 800477e:	1a6f      	subs	r7, r5, r1
 8004780:	6965      	ldr	r5, [r4, #20]
 8004782:	2302      	movs	r3, #2
 8004784:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004788:	fb95 f5f3 	sdiv	r5, r5, r3
 800478c:	f109 0301 	add.w	r3, r9, #1
 8004790:	443b      	add	r3, r7
 8004792:	429d      	cmp	r5, r3
 8004794:	bf38      	it	cc
 8004796:	461d      	movcc	r5, r3
 8004798:	0553      	lsls	r3, r2, #21
 800479a:	d530      	bpl.n	80047fe <__ssputs_r+0x9e>
 800479c:	4629      	mov	r1, r5
 800479e:	f000 fb2b 	bl	8004df8 <_malloc_r>
 80047a2:	4606      	mov	r6, r0
 80047a4:	b950      	cbnz	r0, 80047bc <__ssputs_r+0x5c>
 80047a6:	230c      	movs	r3, #12
 80047a8:	f8ca 3000 	str.w	r3, [sl]
 80047ac:	89a3      	ldrh	r3, [r4, #12]
 80047ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047b2:	81a3      	strh	r3, [r4, #12]
 80047b4:	f04f 30ff 	mov.w	r0, #4294967295
 80047b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047bc:	463a      	mov	r2, r7
 80047be:	6921      	ldr	r1, [r4, #16]
 80047c0:	f000 faa8 	bl	8004d14 <memcpy>
 80047c4:	89a3      	ldrh	r3, [r4, #12]
 80047c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80047ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ce:	81a3      	strh	r3, [r4, #12]
 80047d0:	6126      	str	r6, [r4, #16]
 80047d2:	6165      	str	r5, [r4, #20]
 80047d4:	443e      	add	r6, r7
 80047d6:	1bed      	subs	r5, r5, r7
 80047d8:	6026      	str	r6, [r4, #0]
 80047da:	60a5      	str	r5, [r4, #8]
 80047dc:	464e      	mov	r6, r9
 80047de:	454e      	cmp	r6, r9
 80047e0:	d900      	bls.n	80047e4 <__ssputs_r+0x84>
 80047e2:	464e      	mov	r6, r9
 80047e4:	4632      	mov	r2, r6
 80047e6:	4641      	mov	r1, r8
 80047e8:	6820      	ldr	r0, [r4, #0]
 80047ea:	f000 fa9e 	bl	8004d2a <memmove>
 80047ee:	68a3      	ldr	r3, [r4, #8]
 80047f0:	1b9b      	subs	r3, r3, r6
 80047f2:	60a3      	str	r3, [r4, #8]
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	441e      	add	r6, r3
 80047f8:	6026      	str	r6, [r4, #0]
 80047fa:	2000      	movs	r0, #0
 80047fc:	e7dc      	b.n	80047b8 <__ssputs_r+0x58>
 80047fe:	462a      	mov	r2, r5
 8004800:	f000 fb54 	bl	8004eac <_realloc_r>
 8004804:	4606      	mov	r6, r0
 8004806:	2800      	cmp	r0, #0
 8004808:	d1e2      	bne.n	80047d0 <__ssputs_r+0x70>
 800480a:	6921      	ldr	r1, [r4, #16]
 800480c:	4650      	mov	r0, sl
 800480e:	f000 faa5 	bl	8004d5c <_free_r>
 8004812:	e7c8      	b.n	80047a6 <__ssputs_r+0x46>

08004814 <_svfiprintf_r>:
 8004814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004818:	461d      	mov	r5, r3
 800481a:	898b      	ldrh	r3, [r1, #12]
 800481c:	061f      	lsls	r7, r3, #24
 800481e:	b09d      	sub	sp, #116	; 0x74
 8004820:	4680      	mov	r8, r0
 8004822:	460c      	mov	r4, r1
 8004824:	4616      	mov	r6, r2
 8004826:	d50f      	bpl.n	8004848 <_svfiprintf_r+0x34>
 8004828:	690b      	ldr	r3, [r1, #16]
 800482a:	b96b      	cbnz	r3, 8004848 <_svfiprintf_r+0x34>
 800482c:	2140      	movs	r1, #64	; 0x40
 800482e:	f000 fae3 	bl	8004df8 <_malloc_r>
 8004832:	6020      	str	r0, [r4, #0]
 8004834:	6120      	str	r0, [r4, #16]
 8004836:	b928      	cbnz	r0, 8004844 <_svfiprintf_r+0x30>
 8004838:	230c      	movs	r3, #12
 800483a:	f8c8 3000 	str.w	r3, [r8]
 800483e:	f04f 30ff 	mov.w	r0, #4294967295
 8004842:	e0c8      	b.n	80049d6 <_svfiprintf_r+0x1c2>
 8004844:	2340      	movs	r3, #64	; 0x40
 8004846:	6163      	str	r3, [r4, #20]
 8004848:	2300      	movs	r3, #0
 800484a:	9309      	str	r3, [sp, #36]	; 0x24
 800484c:	2320      	movs	r3, #32
 800484e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004852:	2330      	movs	r3, #48	; 0x30
 8004854:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004858:	9503      	str	r5, [sp, #12]
 800485a:	f04f 0b01 	mov.w	fp, #1
 800485e:	4637      	mov	r7, r6
 8004860:	463d      	mov	r5, r7
 8004862:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004866:	b10b      	cbz	r3, 800486c <_svfiprintf_r+0x58>
 8004868:	2b25      	cmp	r3, #37	; 0x25
 800486a:	d13e      	bne.n	80048ea <_svfiprintf_r+0xd6>
 800486c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004870:	d00b      	beq.n	800488a <_svfiprintf_r+0x76>
 8004872:	4653      	mov	r3, sl
 8004874:	4632      	mov	r2, r6
 8004876:	4621      	mov	r1, r4
 8004878:	4640      	mov	r0, r8
 800487a:	f7ff ff71 	bl	8004760 <__ssputs_r>
 800487e:	3001      	adds	r0, #1
 8004880:	f000 80a4 	beq.w	80049cc <_svfiprintf_r+0x1b8>
 8004884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004886:	4453      	add	r3, sl
 8004888:	9309      	str	r3, [sp, #36]	; 0x24
 800488a:	783b      	ldrb	r3, [r7, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 809d 	beq.w	80049cc <_svfiprintf_r+0x1b8>
 8004892:	2300      	movs	r3, #0
 8004894:	f04f 32ff 	mov.w	r2, #4294967295
 8004898:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800489c:	9304      	str	r3, [sp, #16]
 800489e:	9307      	str	r3, [sp, #28]
 80048a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048a4:	931a      	str	r3, [sp, #104]	; 0x68
 80048a6:	462f      	mov	r7, r5
 80048a8:	2205      	movs	r2, #5
 80048aa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80048ae:	4850      	ldr	r0, [pc, #320]	; (80049f0 <_svfiprintf_r+0x1dc>)
 80048b0:	f7fb fc9e 	bl	80001f0 <memchr>
 80048b4:	9b04      	ldr	r3, [sp, #16]
 80048b6:	b9d0      	cbnz	r0, 80048ee <_svfiprintf_r+0xda>
 80048b8:	06d9      	lsls	r1, r3, #27
 80048ba:	bf44      	itt	mi
 80048bc:	2220      	movmi	r2, #32
 80048be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80048c2:	071a      	lsls	r2, r3, #28
 80048c4:	bf44      	itt	mi
 80048c6:	222b      	movmi	r2, #43	; 0x2b
 80048c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80048cc:	782a      	ldrb	r2, [r5, #0]
 80048ce:	2a2a      	cmp	r2, #42	; 0x2a
 80048d0:	d015      	beq.n	80048fe <_svfiprintf_r+0xea>
 80048d2:	9a07      	ldr	r2, [sp, #28]
 80048d4:	462f      	mov	r7, r5
 80048d6:	2000      	movs	r0, #0
 80048d8:	250a      	movs	r5, #10
 80048da:	4639      	mov	r1, r7
 80048dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048e0:	3b30      	subs	r3, #48	; 0x30
 80048e2:	2b09      	cmp	r3, #9
 80048e4:	d94d      	bls.n	8004982 <_svfiprintf_r+0x16e>
 80048e6:	b1b8      	cbz	r0, 8004918 <_svfiprintf_r+0x104>
 80048e8:	e00f      	b.n	800490a <_svfiprintf_r+0xf6>
 80048ea:	462f      	mov	r7, r5
 80048ec:	e7b8      	b.n	8004860 <_svfiprintf_r+0x4c>
 80048ee:	4a40      	ldr	r2, [pc, #256]	; (80049f0 <_svfiprintf_r+0x1dc>)
 80048f0:	1a80      	subs	r0, r0, r2
 80048f2:	fa0b f000 	lsl.w	r0, fp, r0
 80048f6:	4318      	orrs	r0, r3
 80048f8:	9004      	str	r0, [sp, #16]
 80048fa:	463d      	mov	r5, r7
 80048fc:	e7d3      	b.n	80048a6 <_svfiprintf_r+0x92>
 80048fe:	9a03      	ldr	r2, [sp, #12]
 8004900:	1d11      	adds	r1, r2, #4
 8004902:	6812      	ldr	r2, [r2, #0]
 8004904:	9103      	str	r1, [sp, #12]
 8004906:	2a00      	cmp	r2, #0
 8004908:	db01      	blt.n	800490e <_svfiprintf_r+0xfa>
 800490a:	9207      	str	r2, [sp, #28]
 800490c:	e004      	b.n	8004918 <_svfiprintf_r+0x104>
 800490e:	4252      	negs	r2, r2
 8004910:	f043 0302 	orr.w	r3, r3, #2
 8004914:	9207      	str	r2, [sp, #28]
 8004916:	9304      	str	r3, [sp, #16]
 8004918:	783b      	ldrb	r3, [r7, #0]
 800491a:	2b2e      	cmp	r3, #46	; 0x2e
 800491c:	d10c      	bne.n	8004938 <_svfiprintf_r+0x124>
 800491e:	787b      	ldrb	r3, [r7, #1]
 8004920:	2b2a      	cmp	r3, #42	; 0x2a
 8004922:	d133      	bne.n	800498c <_svfiprintf_r+0x178>
 8004924:	9b03      	ldr	r3, [sp, #12]
 8004926:	1d1a      	adds	r2, r3, #4
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	9203      	str	r2, [sp, #12]
 800492c:	2b00      	cmp	r3, #0
 800492e:	bfb8      	it	lt
 8004930:	f04f 33ff 	movlt.w	r3, #4294967295
 8004934:	3702      	adds	r7, #2
 8004936:	9305      	str	r3, [sp, #20]
 8004938:	4d2e      	ldr	r5, [pc, #184]	; (80049f4 <_svfiprintf_r+0x1e0>)
 800493a:	7839      	ldrb	r1, [r7, #0]
 800493c:	2203      	movs	r2, #3
 800493e:	4628      	mov	r0, r5
 8004940:	f7fb fc56 	bl	80001f0 <memchr>
 8004944:	b138      	cbz	r0, 8004956 <_svfiprintf_r+0x142>
 8004946:	2340      	movs	r3, #64	; 0x40
 8004948:	1b40      	subs	r0, r0, r5
 800494a:	fa03 f000 	lsl.w	r0, r3, r0
 800494e:	9b04      	ldr	r3, [sp, #16]
 8004950:	4303      	orrs	r3, r0
 8004952:	3701      	adds	r7, #1
 8004954:	9304      	str	r3, [sp, #16]
 8004956:	7839      	ldrb	r1, [r7, #0]
 8004958:	4827      	ldr	r0, [pc, #156]	; (80049f8 <_svfiprintf_r+0x1e4>)
 800495a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800495e:	2206      	movs	r2, #6
 8004960:	1c7e      	adds	r6, r7, #1
 8004962:	f7fb fc45 	bl	80001f0 <memchr>
 8004966:	2800      	cmp	r0, #0
 8004968:	d038      	beq.n	80049dc <_svfiprintf_r+0x1c8>
 800496a:	4b24      	ldr	r3, [pc, #144]	; (80049fc <_svfiprintf_r+0x1e8>)
 800496c:	bb13      	cbnz	r3, 80049b4 <_svfiprintf_r+0x1a0>
 800496e:	9b03      	ldr	r3, [sp, #12]
 8004970:	3307      	adds	r3, #7
 8004972:	f023 0307 	bic.w	r3, r3, #7
 8004976:	3308      	adds	r3, #8
 8004978:	9303      	str	r3, [sp, #12]
 800497a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800497c:	444b      	add	r3, r9
 800497e:	9309      	str	r3, [sp, #36]	; 0x24
 8004980:	e76d      	b.n	800485e <_svfiprintf_r+0x4a>
 8004982:	fb05 3202 	mla	r2, r5, r2, r3
 8004986:	2001      	movs	r0, #1
 8004988:	460f      	mov	r7, r1
 800498a:	e7a6      	b.n	80048da <_svfiprintf_r+0xc6>
 800498c:	2300      	movs	r3, #0
 800498e:	3701      	adds	r7, #1
 8004990:	9305      	str	r3, [sp, #20]
 8004992:	4619      	mov	r1, r3
 8004994:	250a      	movs	r5, #10
 8004996:	4638      	mov	r0, r7
 8004998:	f810 2b01 	ldrb.w	r2, [r0], #1
 800499c:	3a30      	subs	r2, #48	; 0x30
 800499e:	2a09      	cmp	r2, #9
 80049a0:	d903      	bls.n	80049aa <_svfiprintf_r+0x196>
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0c8      	beq.n	8004938 <_svfiprintf_r+0x124>
 80049a6:	9105      	str	r1, [sp, #20]
 80049a8:	e7c6      	b.n	8004938 <_svfiprintf_r+0x124>
 80049aa:	fb05 2101 	mla	r1, r5, r1, r2
 80049ae:	2301      	movs	r3, #1
 80049b0:	4607      	mov	r7, r0
 80049b2:	e7f0      	b.n	8004996 <_svfiprintf_r+0x182>
 80049b4:	ab03      	add	r3, sp, #12
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	4622      	mov	r2, r4
 80049ba:	4b11      	ldr	r3, [pc, #68]	; (8004a00 <_svfiprintf_r+0x1ec>)
 80049bc:	a904      	add	r1, sp, #16
 80049be:	4640      	mov	r0, r8
 80049c0:	f3af 8000 	nop.w
 80049c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80049c8:	4681      	mov	r9, r0
 80049ca:	d1d6      	bne.n	800497a <_svfiprintf_r+0x166>
 80049cc:	89a3      	ldrh	r3, [r4, #12]
 80049ce:	065b      	lsls	r3, r3, #25
 80049d0:	f53f af35 	bmi.w	800483e <_svfiprintf_r+0x2a>
 80049d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049d6:	b01d      	add	sp, #116	; 0x74
 80049d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049dc:	ab03      	add	r3, sp, #12
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	4622      	mov	r2, r4
 80049e2:	4b07      	ldr	r3, [pc, #28]	; (8004a00 <_svfiprintf_r+0x1ec>)
 80049e4:	a904      	add	r1, sp, #16
 80049e6:	4640      	mov	r0, r8
 80049e8:	f000 f882 	bl	8004af0 <_printf_i>
 80049ec:	e7ea      	b.n	80049c4 <_svfiprintf_r+0x1b0>
 80049ee:	bf00      	nop
 80049f0:	08004f68 	.word	0x08004f68
 80049f4:	08004f6e 	.word	0x08004f6e
 80049f8:	08004f72 	.word	0x08004f72
 80049fc:	00000000 	.word	0x00000000
 8004a00:	08004761 	.word	0x08004761

08004a04 <_printf_common>:
 8004a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a08:	4691      	mov	r9, r2
 8004a0a:	461f      	mov	r7, r3
 8004a0c:	688a      	ldr	r2, [r1, #8]
 8004a0e:	690b      	ldr	r3, [r1, #16]
 8004a10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a14:	4293      	cmp	r3, r2
 8004a16:	bfb8      	it	lt
 8004a18:	4613      	movlt	r3, r2
 8004a1a:	f8c9 3000 	str.w	r3, [r9]
 8004a1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a22:	4606      	mov	r6, r0
 8004a24:	460c      	mov	r4, r1
 8004a26:	b112      	cbz	r2, 8004a2e <_printf_common+0x2a>
 8004a28:	3301      	adds	r3, #1
 8004a2a:	f8c9 3000 	str.w	r3, [r9]
 8004a2e:	6823      	ldr	r3, [r4, #0]
 8004a30:	0699      	lsls	r1, r3, #26
 8004a32:	bf42      	ittt	mi
 8004a34:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004a38:	3302      	addmi	r3, #2
 8004a3a:	f8c9 3000 	strmi.w	r3, [r9]
 8004a3e:	6825      	ldr	r5, [r4, #0]
 8004a40:	f015 0506 	ands.w	r5, r5, #6
 8004a44:	d107      	bne.n	8004a56 <_printf_common+0x52>
 8004a46:	f104 0a19 	add.w	sl, r4, #25
 8004a4a:	68e3      	ldr	r3, [r4, #12]
 8004a4c:	f8d9 2000 	ldr.w	r2, [r9]
 8004a50:	1a9b      	subs	r3, r3, r2
 8004a52:	42ab      	cmp	r3, r5
 8004a54:	dc28      	bgt.n	8004aa8 <_printf_common+0xa4>
 8004a56:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004a5a:	6822      	ldr	r2, [r4, #0]
 8004a5c:	3300      	adds	r3, #0
 8004a5e:	bf18      	it	ne
 8004a60:	2301      	movne	r3, #1
 8004a62:	0692      	lsls	r2, r2, #26
 8004a64:	d42d      	bmi.n	8004ac2 <_printf_common+0xbe>
 8004a66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a6a:	4639      	mov	r1, r7
 8004a6c:	4630      	mov	r0, r6
 8004a6e:	47c0      	blx	r8
 8004a70:	3001      	adds	r0, #1
 8004a72:	d020      	beq.n	8004ab6 <_printf_common+0xb2>
 8004a74:	6823      	ldr	r3, [r4, #0]
 8004a76:	68e5      	ldr	r5, [r4, #12]
 8004a78:	f8d9 2000 	ldr.w	r2, [r9]
 8004a7c:	f003 0306 	and.w	r3, r3, #6
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	bf08      	it	eq
 8004a84:	1aad      	subeq	r5, r5, r2
 8004a86:	68a3      	ldr	r3, [r4, #8]
 8004a88:	6922      	ldr	r2, [r4, #16]
 8004a8a:	bf0c      	ite	eq
 8004a8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a90:	2500      	movne	r5, #0
 8004a92:	4293      	cmp	r3, r2
 8004a94:	bfc4      	itt	gt
 8004a96:	1a9b      	subgt	r3, r3, r2
 8004a98:	18ed      	addgt	r5, r5, r3
 8004a9a:	f04f 0900 	mov.w	r9, #0
 8004a9e:	341a      	adds	r4, #26
 8004aa0:	454d      	cmp	r5, r9
 8004aa2:	d11a      	bne.n	8004ada <_printf_common+0xd6>
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	e008      	b.n	8004aba <_printf_common+0xb6>
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	4652      	mov	r2, sl
 8004aac:	4639      	mov	r1, r7
 8004aae:	4630      	mov	r0, r6
 8004ab0:	47c0      	blx	r8
 8004ab2:	3001      	adds	r0, #1
 8004ab4:	d103      	bne.n	8004abe <_printf_common+0xba>
 8004ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8004aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004abe:	3501      	adds	r5, #1
 8004ac0:	e7c3      	b.n	8004a4a <_printf_common+0x46>
 8004ac2:	18e1      	adds	r1, r4, r3
 8004ac4:	1c5a      	adds	r2, r3, #1
 8004ac6:	2030      	movs	r0, #48	; 0x30
 8004ac8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004acc:	4422      	add	r2, r4
 8004ace:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ad2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ad6:	3302      	adds	r3, #2
 8004ad8:	e7c5      	b.n	8004a66 <_printf_common+0x62>
 8004ada:	2301      	movs	r3, #1
 8004adc:	4622      	mov	r2, r4
 8004ade:	4639      	mov	r1, r7
 8004ae0:	4630      	mov	r0, r6
 8004ae2:	47c0      	blx	r8
 8004ae4:	3001      	adds	r0, #1
 8004ae6:	d0e6      	beq.n	8004ab6 <_printf_common+0xb2>
 8004ae8:	f109 0901 	add.w	r9, r9, #1
 8004aec:	e7d8      	b.n	8004aa0 <_printf_common+0x9c>
	...

08004af0 <_printf_i>:
 8004af0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004af4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004af8:	460c      	mov	r4, r1
 8004afa:	7e09      	ldrb	r1, [r1, #24]
 8004afc:	b085      	sub	sp, #20
 8004afe:	296e      	cmp	r1, #110	; 0x6e
 8004b00:	4617      	mov	r7, r2
 8004b02:	4606      	mov	r6, r0
 8004b04:	4698      	mov	r8, r3
 8004b06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b08:	f000 80b3 	beq.w	8004c72 <_printf_i+0x182>
 8004b0c:	d822      	bhi.n	8004b54 <_printf_i+0x64>
 8004b0e:	2963      	cmp	r1, #99	; 0x63
 8004b10:	d036      	beq.n	8004b80 <_printf_i+0x90>
 8004b12:	d80a      	bhi.n	8004b2a <_printf_i+0x3a>
 8004b14:	2900      	cmp	r1, #0
 8004b16:	f000 80b9 	beq.w	8004c8c <_printf_i+0x19c>
 8004b1a:	2958      	cmp	r1, #88	; 0x58
 8004b1c:	f000 8083 	beq.w	8004c26 <_printf_i+0x136>
 8004b20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b24:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004b28:	e032      	b.n	8004b90 <_printf_i+0xa0>
 8004b2a:	2964      	cmp	r1, #100	; 0x64
 8004b2c:	d001      	beq.n	8004b32 <_printf_i+0x42>
 8004b2e:	2969      	cmp	r1, #105	; 0x69
 8004b30:	d1f6      	bne.n	8004b20 <_printf_i+0x30>
 8004b32:	6820      	ldr	r0, [r4, #0]
 8004b34:	6813      	ldr	r3, [r2, #0]
 8004b36:	0605      	lsls	r5, r0, #24
 8004b38:	f103 0104 	add.w	r1, r3, #4
 8004b3c:	d52a      	bpl.n	8004b94 <_printf_i+0xa4>
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6011      	str	r1, [r2, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	da03      	bge.n	8004b4e <_printf_i+0x5e>
 8004b46:	222d      	movs	r2, #45	; 0x2d
 8004b48:	425b      	negs	r3, r3
 8004b4a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004b4e:	486f      	ldr	r0, [pc, #444]	; (8004d0c <_printf_i+0x21c>)
 8004b50:	220a      	movs	r2, #10
 8004b52:	e039      	b.n	8004bc8 <_printf_i+0xd8>
 8004b54:	2973      	cmp	r1, #115	; 0x73
 8004b56:	f000 809d 	beq.w	8004c94 <_printf_i+0x1a4>
 8004b5a:	d808      	bhi.n	8004b6e <_printf_i+0x7e>
 8004b5c:	296f      	cmp	r1, #111	; 0x6f
 8004b5e:	d020      	beq.n	8004ba2 <_printf_i+0xb2>
 8004b60:	2970      	cmp	r1, #112	; 0x70
 8004b62:	d1dd      	bne.n	8004b20 <_printf_i+0x30>
 8004b64:	6823      	ldr	r3, [r4, #0]
 8004b66:	f043 0320 	orr.w	r3, r3, #32
 8004b6a:	6023      	str	r3, [r4, #0]
 8004b6c:	e003      	b.n	8004b76 <_printf_i+0x86>
 8004b6e:	2975      	cmp	r1, #117	; 0x75
 8004b70:	d017      	beq.n	8004ba2 <_printf_i+0xb2>
 8004b72:	2978      	cmp	r1, #120	; 0x78
 8004b74:	d1d4      	bne.n	8004b20 <_printf_i+0x30>
 8004b76:	2378      	movs	r3, #120	; 0x78
 8004b78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b7c:	4864      	ldr	r0, [pc, #400]	; (8004d10 <_printf_i+0x220>)
 8004b7e:	e055      	b.n	8004c2c <_printf_i+0x13c>
 8004b80:	6813      	ldr	r3, [r2, #0]
 8004b82:	1d19      	adds	r1, r3, #4
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6011      	str	r1, [r2, #0]
 8004b88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b90:	2301      	movs	r3, #1
 8004b92:	e08c      	b.n	8004cae <_printf_i+0x1be>
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6011      	str	r1, [r2, #0]
 8004b98:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b9c:	bf18      	it	ne
 8004b9e:	b21b      	sxthne	r3, r3
 8004ba0:	e7cf      	b.n	8004b42 <_printf_i+0x52>
 8004ba2:	6813      	ldr	r3, [r2, #0]
 8004ba4:	6825      	ldr	r5, [r4, #0]
 8004ba6:	1d18      	adds	r0, r3, #4
 8004ba8:	6010      	str	r0, [r2, #0]
 8004baa:	0628      	lsls	r0, r5, #24
 8004bac:	d501      	bpl.n	8004bb2 <_printf_i+0xc2>
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	e002      	b.n	8004bb8 <_printf_i+0xc8>
 8004bb2:	0668      	lsls	r0, r5, #25
 8004bb4:	d5fb      	bpl.n	8004bae <_printf_i+0xbe>
 8004bb6:	881b      	ldrh	r3, [r3, #0]
 8004bb8:	4854      	ldr	r0, [pc, #336]	; (8004d0c <_printf_i+0x21c>)
 8004bba:	296f      	cmp	r1, #111	; 0x6f
 8004bbc:	bf14      	ite	ne
 8004bbe:	220a      	movne	r2, #10
 8004bc0:	2208      	moveq	r2, #8
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004bc8:	6865      	ldr	r5, [r4, #4]
 8004bca:	60a5      	str	r5, [r4, #8]
 8004bcc:	2d00      	cmp	r5, #0
 8004bce:	f2c0 8095 	blt.w	8004cfc <_printf_i+0x20c>
 8004bd2:	6821      	ldr	r1, [r4, #0]
 8004bd4:	f021 0104 	bic.w	r1, r1, #4
 8004bd8:	6021      	str	r1, [r4, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d13d      	bne.n	8004c5a <_printf_i+0x16a>
 8004bde:	2d00      	cmp	r5, #0
 8004be0:	f040 808e 	bne.w	8004d00 <_printf_i+0x210>
 8004be4:	4665      	mov	r5, ip
 8004be6:	2a08      	cmp	r2, #8
 8004be8:	d10b      	bne.n	8004c02 <_printf_i+0x112>
 8004bea:	6823      	ldr	r3, [r4, #0]
 8004bec:	07db      	lsls	r3, r3, #31
 8004bee:	d508      	bpl.n	8004c02 <_printf_i+0x112>
 8004bf0:	6923      	ldr	r3, [r4, #16]
 8004bf2:	6862      	ldr	r2, [r4, #4]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	bfde      	ittt	le
 8004bf8:	2330      	movle	r3, #48	; 0x30
 8004bfa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004bfe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c02:	ebac 0305 	sub.w	r3, ip, r5
 8004c06:	6123      	str	r3, [r4, #16]
 8004c08:	f8cd 8000 	str.w	r8, [sp]
 8004c0c:	463b      	mov	r3, r7
 8004c0e:	aa03      	add	r2, sp, #12
 8004c10:	4621      	mov	r1, r4
 8004c12:	4630      	mov	r0, r6
 8004c14:	f7ff fef6 	bl	8004a04 <_printf_common>
 8004c18:	3001      	adds	r0, #1
 8004c1a:	d14d      	bne.n	8004cb8 <_printf_i+0x1c8>
 8004c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c20:	b005      	add	sp, #20
 8004c22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c26:	4839      	ldr	r0, [pc, #228]	; (8004d0c <_printf_i+0x21c>)
 8004c28:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004c2c:	6813      	ldr	r3, [r2, #0]
 8004c2e:	6821      	ldr	r1, [r4, #0]
 8004c30:	1d1d      	adds	r5, r3, #4
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6015      	str	r5, [r2, #0]
 8004c36:	060a      	lsls	r2, r1, #24
 8004c38:	d50b      	bpl.n	8004c52 <_printf_i+0x162>
 8004c3a:	07ca      	lsls	r2, r1, #31
 8004c3c:	bf44      	itt	mi
 8004c3e:	f041 0120 	orrmi.w	r1, r1, #32
 8004c42:	6021      	strmi	r1, [r4, #0]
 8004c44:	b91b      	cbnz	r3, 8004c4e <_printf_i+0x15e>
 8004c46:	6822      	ldr	r2, [r4, #0]
 8004c48:	f022 0220 	bic.w	r2, r2, #32
 8004c4c:	6022      	str	r2, [r4, #0]
 8004c4e:	2210      	movs	r2, #16
 8004c50:	e7b7      	b.n	8004bc2 <_printf_i+0xd2>
 8004c52:	064d      	lsls	r5, r1, #25
 8004c54:	bf48      	it	mi
 8004c56:	b29b      	uxthmi	r3, r3
 8004c58:	e7ef      	b.n	8004c3a <_printf_i+0x14a>
 8004c5a:	4665      	mov	r5, ip
 8004c5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c60:	fb02 3311 	mls	r3, r2, r1, r3
 8004c64:	5cc3      	ldrb	r3, [r0, r3]
 8004c66:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	2900      	cmp	r1, #0
 8004c6e:	d1f5      	bne.n	8004c5c <_printf_i+0x16c>
 8004c70:	e7b9      	b.n	8004be6 <_printf_i+0xf6>
 8004c72:	6813      	ldr	r3, [r2, #0]
 8004c74:	6825      	ldr	r5, [r4, #0]
 8004c76:	6961      	ldr	r1, [r4, #20]
 8004c78:	1d18      	adds	r0, r3, #4
 8004c7a:	6010      	str	r0, [r2, #0]
 8004c7c:	0628      	lsls	r0, r5, #24
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	d501      	bpl.n	8004c86 <_printf_i+0x196>
 8004c82:	6019      	str	r1, [r3, #0]
 8004c84:	e002      	b.n	8004c8c <_printf_i+0x19c>
 8004c86:	066a      	lsls	r2, r5, #25
 8004c88:	d5fb      	bpl.n	8004c82 <_printf_i+0x192>
 8004c8a:	8019      	strh	r1, [r3, #0]
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	6123      	str	r3, [r4, #16]
 8004c90:	4665      	mov	r5, ip
 8004c92:	e7b9      	b.n	8004c08 <_printf_i+0x118>
 8004c94:	6813      	ldr	r3, [r2, #0]
 8004c96:	1d19      	adds	r1, r3, #4
 8004c98:	6011      	str	r1, [r2, #0]
 8004c9a:	681d      	ldr	r5, [r3, #0]
 8004c9c:	6862      	ldr	r2, [r4, #4]
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	f7fb faa5 	bl	80001f0 <memchr>
 8004ca6:	b108      	cbz	r0, 8004cac <_printf_i+0x1bc>
 8004ca8:	1b40      	subs	r0, r0, r5
 8004caa:	6060      	str	r0, [r4, #4]
 8004cac:	6863      	ldr	r3, [r4, #4]
 8004cae:	6123      	str	r3, [r4, #16]
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cb6:	e7a7      	b.n	8004c08 <_printf_i+0x118>
 8004cb8:	6923      	ldr	r3, [r4, #16]
 8004cba:	462a      	mov	r2, r5
 8004cbc:	4639      	mov	r1, r7
 8004cbe:	4630      	mov	r0, r6
 8004cc0:	47c0      	blx	r8
 8004cc2:	3001      	adds	r0, #1
 8004cc4:	d0aa      	beq.n	8004c1c <_printf_i+0x12c>
 8004cc6:	6823      	ldr	r3, [r4, #0]
 8004cc8:	079b      	lsls	r3, r3, #30
 8004cca:	d413      	bmi.n	8004cf4 <_printf_i+0x204>
 8004ccc:	68e0      	ldr	r0, [r4, #12]
 8004cce:	9b03      	ldr	r3, [sp, #12]
 8004cd0:	4298      	cmp	r0, r3
 8004cd2:	bfb8      	it	lt
 8004cd4:	4618      	movlt	r0, r3
 8004cd6:	e7a3      	b.n	8004c20 <_printf_i+0x130>
 8004cd8:	2301      	movs	r3, #1
 8004cda:	464a      	mov	r2, r9
 8004cdc:	4639      	mov	r1, r7
 8004cde:	4630      	mov	r0, r6
 8004ce0:	47c0      	blx	r8
 8004ce2:	3001      	adds	r0, #1
 8004ce4:	d09a      	beq.n	8004c1c <_printf_i+0x12c>
 8004ce6:	3501      	adds	r5, #1
 8004ce8:	68e3      	ldr	r3, [r4, #12]
 8004cea:	9a03      	ldr	r2, [sp, #12]
 8004cec:	1a9b      	subs	r3, r3, r2
 8004cee:	42ab      	cmp	r3, r5
 8004cf0:	dcf2      	bgt.n	8004cd8 <_printf_i+0x1e8>
 8004cf2:	e7eb      	b.n	8004ccc <_printf_i+0x1dc>
 8004cf4:	2500      	movs	r5, #0
 8004cf6:	f104 0919 	add.w	r9, r4, #25
 8004cfa:	e7f5      	b.n	8004ce8 <_printf_i+0x1f8>
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1ac      	bne.n	8004c5a <_printf_i+0x16a>
 8004d00:	7803      	ldrb	r3, [r0, #0]
 8004d02:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d06:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d0a:	e76c      	b.n	8004be6 <_printf_i+0xf6>
 8004d0c:	08004f79 	.word	0x08004f79
 8004d10:	08004f8a 	.word	0x08004f8a

08004d14 <memcpy>:
 8004d14:	b510      	push	{r4, lr}
 8004d16:	1e43      	subs	r3, r0, #1
 8004d18:	440a      	add	r2, r1
 8004d1a:	4291      	cmp	r1, r2
 8004d1c:	d100      	bne.n	8004d20 <memcpy+0xc>
 8004d1e:	bd10      	pop	{r4, pc}
 8004d20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d28:	e7f7      	b.n	8004d1a <memcpy+0x6>

08004d2a <memmove>:
 8004d2a:	4288      	cmp	r0, r1
 8004d2c:	b510      	push	{r4, lr}
 8004d2e:	eb01 0302 	add.w	r3, r1, r2
 8004d32:	d807      	bhi.n	8004d44 <memmove+0x1a>
 8004d34:	1e42      	subs	r2, r0, #1
 8004d36:	4299      	cmp	r1, r3
 8004d38:	d00a      	beq.n	8004d50 <memmove+0x26>
 8004d3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d3e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004d42:	e7f8      	b.n	8004d36 <memmove+0xc>
 8004d44:	4283      	cmp	r3, r0
 8004d46:	d9f5      	bls.n	8004d34 <memmove+0xa>
 8004d48:	1881      	adds	r1, r0, r2
 8004d4a:	1ad2      	subs	r2, r2, r3
 8004d4c:	42d3      	cmn	r3, r2
 8004d4e:	d100      	bne.n	8004d52 <memmove+0x28>
 8004d50:	bd10      	pop	{r4, pc}
 8004d52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d56:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004d5a:	e7f7      	b.n	8004d4c <memmove+0x22>

08004d5c <_free_r>:
 8004d5c:	b538      	push	{r3, r4, r5, lr}
 8004d5e:	4605      	mov	r5, r0
 8004d60:	2900      	cmp	r1, #0
 8004d62:	d045      	beq.n	8004df0 <_free_r+0x94>
 8004d64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d68:	1f0c      	subs	r4, r1, #4
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	bfb8      	it	lt
 8004d6e:	18e4      	addlt	r4, r4, r3
 8004d70:	f000 f8d2 	bl	8004f18 <__malloc_lock>
 8004d74:	4a1f      	ldr	r2, [pc, #124]	; (8004df4 <_free_r+0x98>)
 8004d76:	6813      	ldr	r3, [r2, #0]
 8004d78:	4610      	mov	r0, r2
 8004d7a:	b933      	cbnz	r3, 8004d8a <_free_r+0x2e>
 8004d7c:	6063      	str	r3, [r4, #4]
 8004d7e:	6014      	str	r4, [r2, #0]
 8004d80:	4628      	mov	r0, r5
 8004d82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d86:	f000 b8c8 	b.w	8004f1a <__malloc_unlock>
 8004d8a:	42a3      	cmp	r3, r4
 8004d8c:	d90c      	bls.n	8004da8 <_free_r+0x4c>
 8004d8e:	6821      	ldr	r1, [r4, #0]
 8004d90:	1862      	adds	r2, r4, r1
 8004d92:	4293      	cmp	r3, r2
 8004d94:	bf04      	itt	eq
 8004d96:	681a      	ldreq	r2, [r3, #0]
 8004d98:	685b      	ldreq	r3, [r3, #4]
 8004d9a:	6063      	str	r3, [r4, #4]
 8004d9c:	bf04      	itt	eq
 8004d9e:	1852      	addeq	r2, r2, r1
 8004da0:	6022      	streq	r2, [r4, #0]
 8004da2:	6004      	str	r4, [r0, #0]
 8004da4:	e7ec      	b.n	8004d80 <_free_r+0x24>
 8004da6:	4613      	mov	r3, r2
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	b10a      	cbz	r2, 8004db0 <_free_r+0x54>
 8004dac:	42a2      	cmp	r2, r4
 8004dae:	d9fa      	bls.n	8004da6 <_free_r+0x4a>
 8004db0:	6819      	ldr	r1, [r3, #0]
 8004db2:	1858      	adds	r0, r3, r1
 8004db4:	42a0      	cmp	r0, r4
 8004db6:	d10b      	bne.n	8004dd0 <_free_r+0x74>
 8004db8:	6820      	ldr	r0, [r4, #0]
 8004dba:	4401      	add	r1, r0
 8004dbc:	1858      	adds	r0, r3, r1
 8004dbe:	4282      	cmp	r2, r0
 8004dc0:	6019      	str	r1, [r3, #0]
 8004dc2:	d1dd      	bne.n	8004d80 <_free_r+0x24>
 8004dc4:	6810      	ldr	r0, [r2, #0]
 8004dc6:	6852      	ldr	r2, [r2, #4]
 8004dc8:	605a      	str	r2, [r3, #4]
 8004dca:	4401      	add	r1, r0
 8004dcc:	6019      	str	r1, [r3, #0]
 8004dce:	e7d7      	b.n	8004d80 <_free_r+0x24>
 8004dd0:	d902      	bls.n	8004dd8 <_free_r+0x7c>
 8004dd2:	230c      	movs	r3, #12
 8004dd4:	602b      	str	r3, [r5, #0]
 8004dd6:	e7d3      	b.n	8004d80 <_free_r+0x24>
 8004dd8:	6820      	ldr	r0, [r4, #0]
 8004dda:	1821      	adds	r1, r4, r0
 8004ddc:	428a      	cmp	r2, r1
 8004dde:	bf04      	itt	eq
 8004de0:	6811      	ldreq	r1, [r2, #0]
 8004de2:	6852      	ldreq	r2, [r2, #4]
 8004de4:	6062      	str	r2, [r4, #4]
 8004de6:	bf04      	itt	eq
 8004de8:	1809      	addeq	r1, r1, r0
 8004dea:	6021      	streq	r1, [r4, #0]
 8004dec:	605c      	str	r4, [r3, #4]
 8004dee:	e7c7      	b.n	8004d80 <_free_r+0x24>
 8004df0:	bd38      	pop	{r3, r4, r5, pc}
 8004df2:	bf00      	nop
 8004df4:	20000094 	.word	0x20000094

08004df8 <_malloc_r>:
 8004df8:	b570      	push	{r4, r5, r6, lr}
 8004dfa:	1ccd      	adds	r5, r1, #3
 8004dfc:	f025 0503 	bic.w	r5, r5, #3
 8004e00:	3508      	adds	r5, #8
 8004e02:	2d0c      	cmp	r5, #12
 8004e04:	bf38      	it	cc
 8004e06:	250c      	movcc	r5, #12
 8004e08:	2d00      	cmp	r5, #0
 8004e0a:	4606      	mov	r6, r0
 8004e0c:	db01      	blt.n	8004e12 <_malloc_r+0x1a>
 8004e0e:	42a9      	cmp	r1, r5
 8004e10:	d903      	bls.n	8004e1a <_malloc_r+0x22>
 8004e12:	230c      	movs	r3, #12
 8004e14:	6033      	str	r3, [r6, #0]
 8004e16:	2000      	movs	r0, #0
 8004e18:	bd70      	pop	{r4, r5, r6, pc}
 8004e1a:	f000 f87d 	bl	8004f18 <__malloc_lock>
 8004e1e:	4a21      	ldr	r2, [pc, #132]	; (8004ea4 <_malloc_r+0xac>)
 8004e20:	6814      	ldr	r4, [r2, #0]
 8004e22:	4621      	mov	r1, r4
 8004e24:	b991      	cbnz	r1, 8004e4c <_malloc_r+0x54>
 8004e26:	4c20      	ldr	r4, [pc, #128]	; (8004ea8 <_malloc_r+0xb0>)
 8004e28:	6823      	ldr	r3, [r4, #0]
 8004e2a:	b91b      	cbnz	r3, 8004e34 <_malloc_r+0x3c>
 8004e2c:	4630      	mov	r0, r6
 8004e2e:	f000 f863 	bl	8004ef8 <_sbrk_r>
 8004e32:	6020      	str	r0, [r4, #0]
 8004e34:	4629      	mov	r1, r5
 8004e36:	4630      	mov	r0, r6
 8004e38:	f000 f85e 	bl	8004ef8 <_sbrk_r>
 8004e3c:	1c43      	adds	r3, r0, #1
 8004e3e:	d124      	bne.n	8004e8a <_malloc_r+0x92>
 8004e40:	230c      	movs	r3, #12
 8004e42:	6033      	str	r3, [r6, #0]
 8004e44:	4630      	mov	r0, r6
 8004e46:	f000 f868 	bl	8004f1a <__malloc_unlock>
 8004e4a:	e7e4      	b.n	8004e16 <_malloc_r+0x1e>
 8004e4c:	680b      	ldr	r3, [r1, #0]
 8004e4e:	1b5b      	subs	r3, r3, r5
 8004e50:	d418      	bmi.n	8004e84 <_malloc_r+0x8c>
 8004e52:	2b0b      	cmp	r3, #11
 8004e54:	d90f      	bls.n	8004e76 <_malloc_r+0x7e>
 8004e56:	600b      	str	r3, [r1, #0]
 8004e58:	50cd      	str	r5, [r1, r3]
 8004e5a:	18cc      	adds	r4, r1, r3
 8004e5c:	4630      	mov	r0, r6
 8004e5e:	f000 f85c 	bl	8004f1a <__malloc_unlock>
 8004e62:	f104 000b 	add.w	r0, r4, #11
 8004e66:	1d23      	adds	r3, r4, #4
 8004e68:	f020 0007 	bic.w	r0, r0, #7
 8004e6c:	1ac3      	subs	r3, r0, r3
 8004e6e:	d0d3      	beq.n	8004e18 <_malloc_r+0x20>
 8004e70:	425a      	negs	r2, r3
 8004e72:	50e2      	str	r2, [r4, r3]
 8004e74:	e7d0      	b.n	8004e18 <_malloc_r+0x20>
 8004e76:	428c      	cmp	r4, r1
 8004e78:	684b      	ldr	r3, [r1, #4]
 8004e7a:	bf16      	itet	ne
 8004e7c:	6063      	strne	r3, [r4, #4]
 8004e7e:	6013      	streq	r3, [r2, #0]
 8004e80:	460c      	movne	r4, r1
 8004e82:	e7eb      	b.n	8004e5c <_malloc_r+0x64>
 8004e84:	460c      	mov	r4, r1
 8004e86:	6849      	ldr	r1, [r1, #4]
 8004e88:	e7cc      	b.n	8004e24 <_malloc_r+0x2c>
 8004e8a:	1cc4      	adds	r4, r0, #3
 8004e8c:	f024 0403 	bic.w	r4, r4, #3
 8004e90:	42a0      	cmp	r0, r4
 8004e92:	d005      	beq.n	8004ea0 <_malloc_r+0xa8>
 8004e94:	1a21      	subs	r1, r4, r0
 8004e96:	4630      	mov	r0, r6
 8004e98:	f000 f82e 	bl	8004ef8 <_sbrk_r>
 8004e9c:	3001      	adds	r0, #1
 8004e9e:	d0cf      	beq.n	8004e40 <_malloc_r+0x48>
 8004ea0:	6025      	str	r5, [r4, #0]
 8004ea2:	e7db      	b.n	8004e5c <_malloc_r+0x64>
 8004ea4:	20000094 	.word	0x20000094
 8004ea8:	20000098 	.word	0x20000098

08004eac <_realloc_r>:
 8004eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eae:	4607      	mov	r7, r0
 8004eb0:	4614      	mov	r4, r2
 8004eb2:	460e      	mov	r6, r1
 8004eb4:	b921      	cbnz	r1, 8004ec0 <_realloc_r+0x14>
 8004eb6:	4611      	mov	r1, r2
 8004eb8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004ebc:	f7ff bf9c 	b.w	8004df8 <_malloc_r>
 8004ec0:	b922      	cbnz	r2, 8004ecc <_realloc_r+0x20>
 8004ec2:	f7ff ff4b 	bl	8004d5c <_free_r>
 8004ec6:	4625      	mov	r5, r4
 8004ec8:	4628      	mov	r0, r5
 8004eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ecc:	f000 f826 	bl	8004f1c <_malloc_usable_size_r>
 8004ed0:	42a0      	cmp	r0, r4
 8004ed2:	d20f      	bcs.n	8004ef4 <_realloc_r+0x48>
 8004ed4:	4621      	mov	r1, r4
 8004ed6:	4638      	mov	r0, r7
 8004ed8:	f7ff ff8e 	bl	8004df8 <_malloc_r>
 8004edc:	4605      	mov	r5, r0
 8004ede:	2800      	cmp	r0, #0
 8004ee0:	d0f2      	beq.n	8004ec8 <_realloc_r+0x1c>
 8004ee2:	4631      	mov	r1, r6
 8004ee4:	4622      	mov	r2, r4
 8004ee6:	f7ff ff15 	bl	8004d14 <memcpy>
 8004eea:	4631      	mov	r1, r6
 8004eec:	4638      	mov	r0, r7
 8004eee:	f7ff ff35 	bl	8004d5c <_free_r>
 8004ef2:	e7e9      	b.n	8004ec8 <_realloc_r+0x1c>
 8004ef4:	4635      	mov	r5, r6
 8004ef6:	e7e7      	b.n	8004ec8 <_realloc_r+0x1c>

08004ef8 <_sbrk_r>:
 8004ef8:	b538      	push	{r3, r4, r5, lr}
 8004efa:	4c06      	ldr	r4, [pc, #24]	; (8004f14 <_sbrk_r+0x1c>)
 8004efc:	2300      	movs	r3, #0
 8004efe:	4605      	mov	r5, r0
 8004f00:	4608      	mov	r0, r1
 8004f02:	6023      	str	r3, [r4, #0]
 8004f04:	f7fc fd80 	bl	8001a08 <_sbrk>
 8004f08:	1c43      	adds	r3, r0, #1
 8004f0a:	d102      	bne.n	8004f12 <_sbrk_r+0x1a>
 8004f0c:	6823      	ldr	r3, [r4, #0]
 8004f0e:	b103      	cbz	r3, 8004f12 <_sbrk_r+0x1a>
 8004f10:	602b      	str	r3, [r5, #0]
 8004f12:	bd38      	pop	{r3, r4, r5, pc}
 8004f14:	20000260 	.word	0x20000260

08004f18 <__malloc_lock>:
 8004f18:	4770      	bx	lr

08004f1a <__malloc_unlock>:
 8004f1a:	4770      	bx	lr

08004f1c <_malloc_usable_size_r>:
 8004f1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f20:	1f18      	subs	r0, r3, #4
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	bfbc      	itt	lt
 8004f26:	580b      	ldrlt	r3, [r1, r0]
 8004f28:	18c0      	addlt	r0, r0, r3
 8004f2a:	4770      	bx	lr

08004f2c <_init>:
 8004f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2e:	bf00      	nop
 8004f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f32:	bc08      	pop	{r3}
 8004f34:	469e      	mov	lr, r3
 8004f36:	4770      	bx	lr

08004f38 <_fini>:
 8004f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f3a:	bf00      	nop
 8004f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f3e:	bc08      	pop	{r3}
 8004f40:	469e      	mov	lr, r3
 8004f42:	4770      	bx	lr
